// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TermsAcceptanceState The terms acceptance state.
//
// swagger:model TermsAcceptanceState
type TermsAcceptanceState string

const (

	// TermsAcceptanceStateNOTACCEPTED captures enum value "NOT_ACCEPTED"
	TermsAcceptanceStateNOTACCEPTED TermsAcceptanceState = "NOT_ACCEPTED"

	// TermsAcceptanceStateACCEPTED captures enum value "ACCEPTED"
	TermsAcceptanceStateACCEPTED TermsAcceptanceState = "ACCEPTED"

	// TermsAcceptanceStateNOTACCEPTEDUPDATEDTERMS captures enum value "NOT_ACCEPTED_UPDATED_TERMS"
	TermsAcceptanceStateNOTACCEPTEDUPDATEDTERMS TermsAcceptanceState = "NOT_ACCEPTED_UPDATED_TERMS"

	// TermsAcceptanceStateEXPIRED captures enum value "EXPIRED"
	TermsAcceptanceStateEXPIRED TermsAcceptanceState = "EXPIRED"
)

// for schema
var termsAcceptanceStateEnum []interface{}

func init() {
	var res []TermsAcceptanceState
	if err := json.Unmarshal([]byte(`["NOT_ACCEPTED","ACCEPTED","NOT_ACCEPTED_UPDATED_TERMS","EXPIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		termsAcceptanceStateEnum = append(termsAcceptanceStateEnum, v)
	}
}

func (m TermsAcceptanceState) validateTermsAcceptanceStateEnum(path, location string, value TermsAcceptanceState) error {
	if err := validate.Enum(path, location, value, termsAcceptanceStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this terms acceptance state
func (m TermsAcceptanceState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTermsAcceptanceStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
