// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivityProgressResponse Response object for the progress updates.
//
// swagger:model ActivityProgressResponse
type ActivityProgressResponse struct {

	// The activity start time.
	// Required: true
	ActivityStartTime *string `json:"activityStartTime"`

	// The latest progress update time.
	// Required: true
	LatestUpdateTime *string `json:"latestUpdateTime"`

	// The progress response for the request.
	// Required: true
	ProgressResponse *ProgressResponse `json:"progressResponse"`
}

// Validate validates this activity progress response
func (m *ActivityProgressResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityProgressResponse) validateActivityStartTime(formats strfmt.Registry) error {

	if err := validate.Required("activityStartTime", "body", m.ActivityStartTime); err != nil {
		return err
	}

	return nil
}

func (m *ActivityProgressResponse) validateLatestUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("latestUpdateTime", "body", m.LatestUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *ActivityProgressResponse) validateProgressResponse(formats strfmt.Registry) error {

	if err := validate.Required("progressResponse", "body", m.ProgressResponse); err != nil {
		return err
	}

	if m.ProgressResponse != nil {
		if err := m.ProgressResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progressResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progressResponse")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activity progress response based on the context it is used
func (m *ActivityProgressResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgressResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityProgressResponse) contextValidateProgressResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ProgressResponse != nil {
		if err := m.ProgressResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progressResponse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progressResponse")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivityProgressResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivityProgressResponse) UnmarshalBinary(b []byte) error {
	var res ActivityProgressResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
