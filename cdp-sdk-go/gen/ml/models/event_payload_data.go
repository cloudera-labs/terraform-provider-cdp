// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventPayloadData EventPayloadData describes the request payload of all operations executed in a specified workspace.
//
// swagger:model EventPayloadData
type EventPayloadData struct {

	// Action the user has generated.
	// Required: true
	Action *string `json:"action"`

	// Time at creation of event.
	// Required: true
	// Format: date-time
	CreatedDate *strfmt.DateTime `json:"createdDate"`

	// The request payload of the operation represented as a JSON string.
	// Required: true
	Payload *string `json:"payload"`

	// Unique request ID to keep track of event.
	// Required: true
	RequestID *string `json:"requestID"`

	// The User CRN is used to monitor which user caused the event.
	// Required: true
	UserCrn *string `json:"userCrn"`
}

// Validate validates this event payload data
func (m *EventPayloadData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventPayloadData) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *EventPayloadData) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("createdDate", "body", m.CreatedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventPayloadData) validatePayload(formats strfmt.Registry) error {

	if err := validate.Required("payload", "body", m.Payload); err != nil {
		return err
	}

	return nil
}

func (m *EventPayloadData) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("requestID", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

func (m *EventPayloadData) validateUserCrn(formats strfmt.Registry) error {

	if err := validate.Required("userCrn", "body", m.UserCrn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event payload data based on context it is used
func (m *EventPayloadData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventPayloadData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventPayloadData) UnmarshalBinary(b []byte) error {
	var res EventPayloadData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
