// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeEnvironmentCredential(params *ChangeEnvironmentCredentialParams) (*ChangeEnvironmentCredentialOK, error)

	CheckEnvironmentConnectivity(params *CheckEnvironmentConnectivityParams) (*CheckEnvironmentConnectivityOK, error)

	CheckKubernetesConnectivity(params *CheckKubernetesConnectivityParams) (*CheckKubernetesConnectivityOK, error)

	CreateAWSCredential(params *CreateAWSCredentialParams) (*CreateAWSCredentialOK, error)

	CreateAWSEnvironment(params *CreateAWSEnvironmentParams) (*CreateAWSEnvironmentOK, error)

	CreateAzureCredential(params *CreateAzureCredentialParams) (*CreateAzureCredentialOK, error)

	CreateAzureEnvironment(params *CreateAzureEnvironmentParams) (*CreateAzureEnvironmentOK, error)

	CreatePrivateEnvironment(params *CreatePrivateEnvironmentParams) (*CreatePrivateEnvironmentOK, error)

	CreateProxyConfig(params *CreateProxyConfigParams) (*CreateProxyConfigOK, error)

	DeleteCredential(params *DeleteCredentialParams) (*DeleteCredentialOK, error)

	DeleteEnvironment(params *DeleteEnvironmentParams) (*DeleteEnvironmentOK, error)

	DeleteIDBrokerMappings(params *DeleteIDBrokerMappingsParams) (*DeleteIDBrokerMappingsOK, error)

	DeleteProxyConfig(params *DeleteProxyConfigParams) (*DeleteProxyConfigOK, error)

	DescribeEnvironment(params *DescribeEnvironmentParams) (*DescribeEnvironmentOK, error)

	GetAccountTelemetry(params *GetAccountTelemetryParams) (*GetAccountTelemetryOK, error)

	GetAccountTelemetryDefault(params *GetAccountTelemetryDefaultParams) (*GetAccountTelemetryDefaultOK, error)

	GetConfigFiles(params *GetConfigFilesParams) (*GetConfigFilesOK, error)

	GetCredentialPrerequisites(params *GetCredentialPrerequisitesParams) (*GetCredentialPrerequisitesOK, error)

	GetEnvironmentSetting(params *GetEnvironmentSettingParams) (*GetEnvironmentSettingOK, error)

	GetFreeipaStatus(params *GetFreeipaStatusParams) (*GetFreeipaStatusOK, error)

	GetIDBrokerMappings(params *GetIDBrokerMappingsParams) (*GetIDBrokerMappingsOK, error)

	GetIDBrokerMappingsSyncStatus(params *GetIDBrokerMappingsSyncStatusParams) (*GetIDBrokerMappingsSyncStatusOK, error)

	GetKeytab(params *GetKeytabParams) (*GetKeytabOK, error)

	GetRootCertificate(params *GetRootCertificateParams) (*GetRootCertificateOK, error)

	GetTruststorePassword(params *GetTruststorePasswordParams) (*GetTruststorePasswordOK, error)

	ListCredentials(params *ListCredentialsParams) (*ListCredentialsOK, error)

	ListEnvironments(params *ListEnvironmentsParams) (*ListEnvironmentsOK, error)

	ListProxyConfigs(params *ListProxyConfigsParams) (*ListProxyConfigsOK, error)

	RepairFreeipa(params *RepairFreeipaParams) (*RepairFreeipaOK, error)

	SetAccountTelemetry(params *SetAccountTelemetryParams) (*SetAccountTelemetryOK, error)

	SetEnvironmentSetting(params *SetEnvironmentSettingParams) (*SetEnvironmentSettingOK, error)

	SetIDBrokerMappings(params *SetIDBrokerMappingsParams) (*SetIDBrokerMappingsOK, error)

	SetPassword(params *SetPasswordParams) (*SetPasswordOK, error)

	SetTelemetryFeatures(params *SetTelemetryFeaturesParams) (*SetTelemetryFeaturesOK, error)

	StartEnvironment(params *StartEnvironmentParams) (*StartEnvironmentOK, error)

	StopEnvironment(params *StopEnvironmentParams) (*StopEnvironmentOK, error)

	SyncAllUsers(params *SyncAllUsersParams) (*SyncAllUsersOK, error)

	SyncIDBrokerMappings(params *SyncIDBrokerMappingsParams) (*SyncIDBrokerMappingsOK, error)

	SyncStatus(params *SyncStatusParams) (*SyncStatusOK, error)

	SyncUser(params *SyncUserParams) (*SyncUserOK, error)

	TestAccountTelemetryRules(params *TestAccountTelemetryRulesParams) (*TestAccountTelemetryRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeEnvironmentCredential changes the credential for an environment

  Changes the credential for an environment.
*/
func (a *Client) ChangeEnvironmentCredential(params *ChangeEnvironmentCredentialParams) (*ChangeEnvironmentCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeEnvironmentCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeEnvironmentCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/changeEnvironmentCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeEnvironmentCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeEnvironmentCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangeEnvironmentCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CheckEnvironmentConnectivity checks connectivity to a new private cloud environment by trying to access the cloudera manager address with provided credentials

  Checks connectivity to a Private Cloud environment.
*/
func (a *Client) CheckEnvironmentConnectivity(params *CheckEnvironmentConnectivityParams) (*CheckEnvironmentConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckEnvironmentConnectivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkEnvironmentConnectivity",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/checkEnvironmentConnectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckEnvironmentConnectivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckEnvironmentConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckEnvironmentConnectivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CheckKubernetesConnectivity checks connectivity to a kubernetes address with provided kubeconfig files

  Checks connectivity to a Kubernetes.
*/
func (a *Client) CheckKubernetesConnectivity(params *CheckKubernetesConnectivityParams) (*CheckKubernetesConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckKubernetesConnectivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkKubernetesConnectivity",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/checkKubernetesConnectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckKubernetesConnectivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckKubernetesConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckKubernetesConnectivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAWSCredential creates a new a w s credential that can be attatched to an environment the credential is used for authorization to provision resources such as compute instances within your cloud provider account

  Creates a new AWS credential.
*/
func (a *Client) CreateAWSCredential(params *CreateAWSCredentialParams) (*CreateAWSCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAWSCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAWSCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAWSEnvironment creates a new a w s environment by providing the cloud provider access and network information a free IP a server will be automatically provisioned when an environment is created

  Creates a new AWS environment.
*/
func (a *Client) CreateAWSEnvironment(params *CreateAWSEnvironmentParams) (*CreateAWSEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAWSEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAWSEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAzureCredential creates a new azure credential that can be attatched to an environment the credential is used for authorization to provision resources such as compute instances within your cloud provider account

  Creates a new Azure credential.
*/
func (a *Client) CreateAzureCredential(params *CreateAzureCredentialParams) (*CreateAzureCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAzureCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAzureEnvironment creates a new azure environment by providing the cloud provider access and network information a free IP a server will be automatically provisioned when an environment is created

  Creates a new Azure environment.
*/
func (a *Client) CreateAzureEnvironment(params *CreateAzureEnvironmentParams) (*CreateAzureEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAzureEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreatePrivateEnvironment creates a new private cloud environment by providing the cloudera manager address and credentials

  Creates a new Private Cloud environment.
*/
func (a *Client) CreatePrivateEnvironment(params *CreatePrivateEnvironmentParams) (*CreatePrivateEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePrivateEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPrivateEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createPrivateEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePrivateEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePrivateEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePrivateEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateProxyConfig creates a new proxy config that can be attatched to an environment

  Creates a new proxy config.
*/
func (a *Client) CreateProxyConfig(params *CreateProxyConfigParams) (*CreateProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProxyConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createProxyConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxyConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProxyConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteCredential deletes a credential

  Deletes a credential.
*/
func (a *Client) DeleteCredential(params *DeleteCredentialParams) (*DeleteCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteEnvironment deletes an environment

  Deletes an environment.
*/
func (a *Client) DeleteEnvironment(params *DeleteEnvironmentParams) (*DeleteEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteIDBrokerMappings deletes all ID broker mappings for an environment

  Deletes all ID Broker mappings for an environment.
*/
func (a *Client) DeleteIDBrokerMappings(params *DeleteIDBrokerMappingsParams) (*DeleteIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIDBrokerMappingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteProxyConfig deletes a proxy config

  Deletes a proxy config.
*/
func (a *Client) DeleteProxyConfig(params *DeleteProxyConfigParams) (*DeleteProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxyConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteProxyConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxyConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProxyConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeEnvironment describes an environment

  Describes an environment.
*/
func (a *Client) DescribeEnvironment(params *DescribeEnvironmentParams) (*DescribeEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/describeEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAccountTelemetry gets account level telemetry settings telemetry features and anonymization rules

  Get account level telemetry settings. (telemetry features and anonymization rules)
*/
func (a *Client) GetAccountTelemetry(params *GetAccountTelemetryParams) (*GetAccountTelemetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountTelemetryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountTelemetry",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getAccountTelemetry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountTelemetryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountTelemetryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountTelemetryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAccountTelemetryDefault gets default account level telemetry settings helps to set back the default values

  Get default account level telemetry settings. Helps to set back the default values.
*/
func (a *Client) GetAccountTelemetryDefault(params *GetAccountTelemetryDefaultParams) (*GetAccountTelemetryDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountTelemetryDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountTelemetryDefault",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getAccountTelemetryDefault",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountTelemetryDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountTelemetryDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountTelemetryDefaultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetConfigFiles gets the client configs for a datalake

  Get the client configs for a Datalake.
*/
func (a *Client) GetConfigFiles(params *GetConfigFilesParams) (*GetConfigFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigFiles",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getConfigFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetConfigFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCredentialPrerequisites this API provides the credential prerequisites for the given cloud provider

  Provides the the credential prerequisites for the given cloud provider.
*/
func (a *Client) GetCredentialPrerequisites(params *GetCredentialPrerequisitesParams) (*GetCredentialPrerequisitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialPrerequisitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCredentialPrerequisites",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getCredentialPrerequisites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCredentialPrerequisitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCredentialPrerequisitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCredentialPrerequisitesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetEnvironmentSetting reads a configuration setting from the environment service

  Read a configuration setting from the environment service.
*/
func (a *Client) GetEnvironmentSetting(params *GetEnvironmentSettingParams) (*GetEnvironmentSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentSetting",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getEnvironmentSetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEnvironmentSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFreeipaStatus gets the status of the free IP a services

  Gets the status of the FreeIPA nodes services and connectivity.
*/
func (a *Client) GetFreeipaStatus(params *GetFreeipaStatusParams) (*GetFreeipaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreeipaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFreeipaStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getFreeipaStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFreeipaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFreeipaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFreeipaStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIDBrokerMappings gets all ID broker mappings for an environment

  Gets all ID Broker mappings for an environment.
*/
func (a *Client) GetIDBrokerMappings(params *GetIDBrokerMappingsParams) (*GetIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIDBrokerMappingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIDBrokerMappingsSyncStatus gets ID broker mappings sync status

  Gets the status of the most recent ID Broker mappings sync operation, if any.
*/
func (a *Client) GetIDBrokerMappingsSyncStatus(params *GetIDBrokerMappingsSyncStatusParams) (*GetIDBrokerMappingsSyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIDBrokerMappingsSyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdBrokerMappingsSyncStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getIdBrokerMappingsSyncStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIDBrokerMappingsSyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIDBrokerMappingsSyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIDBrokerMappingsSyncStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetKeytab retrieves a keytab for a user or machine user

  Retrieves a keytab for a user or machine user.
*/
func (a *Client) GetKeytab(params *GetKeytabParams) (*GetKeytabOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeytabParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKeytab",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getKeytab",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKeytabReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKeytabOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKeytabDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRootCertificate this API provides contents of public certificate for an environment

  This API provides the contents of the root public certificate for an environment. The contents are a base64 encoded blob between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----. This certificate can be imported by end users to establish trust with environment resources.
*/
func (a *Client) GetRootCertificate(params *GetRootCertificateParams) (*GetRootCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRootCertificate",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getRootCertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRootCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetTruststorePassword gets the truststore password for a datalake

  Get the truststore password for a Datalake.
*/
func (a *Client) GetTruststorePassword(params *GetTruststorePasswordParams) (*GetTruststorePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTruststorePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTruststorePassword",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getTruststorePassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTruststorePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTruststorePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTruststorePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListCredentials lists credentials

  Lists credentials.
*/
func (a *Client) ListCredentials(params *ListCredentialsParams) (*ListCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCredentials",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listCredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListEnvironments lists environments

  Lists environments.
*/
func (a *Client) ListEnvironments(params *ListEnvironmentsParams) (*ListEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEnvironments",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listEnvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEnvironmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListProxyConfigs lists proxy configs

  Lists proxy configs.
*/
func (a *Client) ListProxyConfigs(params *ListProxyConfigsParams) (*ListProxyConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProxyConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProxyConfigs",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listProxyConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProxyConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProxyConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProxyConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepairFreeipa repairs the free IP a nodes

  Repairs the FreeIPA nodes if they are in a non working state.
*/
func (a *Client) RepairFreeipa(params *RepairFreeipaParams) (*RepairFreeipaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairFreeipaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairFreeipa",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/repairFreeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RepairFreeipaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepairFreeipaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepairFreeipaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetAccountTelemetry sets account level telemetry settings telemetry features and anonymization rules

  Set account level telemetry settings. (telemetry features and anonymization rules)
*/
func (a *Client) SetAccountTelemetry(params *SetAccountTelemetryParams) (*SetAccountTelemetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccountTelemetryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAccountTelemetry",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setAccountTelemetry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccountTelemetryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAccountTelemetryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAccountTelemetryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetEnvironmentSetting reads a configuration setting from the environment service

  Read a configuration setting from the environment service.
*/
func (a *Client) SetEnvironmentSetting(params *SetEnvironmentSettingParams) (*SetEnvironmentSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnvironmentSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setEnvironmentSetting",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setEnvironmentSetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEnvironmentSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnvironmentSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEnvironmentSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetIDBrokerMappings sets all ID broker mappings for an environment

  Sets all ID Broker mappings for an environment. Overwrites all existing mappings.
*/
func (a *Client) SetIDBrokerMappings(params *SetIDBrokerMappingsParams) (*SetIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetIDBrokerMappingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetPassword sets workload user s password and updates into all environments

  Sets workload user's password and updates into all environments if there is no environment CRN passed or, if environment CRNs list is provided, then password is reset only for that environment. Password must be of min 8 characters and no more then 64 characters and should be combination of UPPER Case, lower case, digits and special characters.
*/
func (a *Client) SetPassword(params *SetPasswordParams) (*SetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPassword",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetTelemetryFeatures configures environment level telemetry feature setting

  Configure environment level telemetry feature setting.
*/
func (a *Client) SetTelemetryFeatures(params *SetTelemetryFeaturesParams) (*SetTelemetryFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTelemetryFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setTelemetryFeatures",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setTelemetryFeatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTelemetryFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTelemetryFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetTelemetryFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartEnvironment starts an environment

  Start an environment.
*/
func (a *Client) StartEnvironment(params *StartEnvironmentParams) (*StartEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/startEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StopEnvironment stops an environment

  Stop an environment.
*/
func (a *Client) StopEnvironment(params *StopEnvironmentParams) (*StopEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/stopEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SyncAllUsers synchronizes environments with all users and groups state with c d p

  Synchronizes environments with all users and groups state with CDP.
*/
func (a *Client) SyncAllUsers(params *SyncAllUsersParams) (*SyncAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncAllUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncAllUsers",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncAllUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncAllUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncAllUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncAllUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SyncIDBrokerMappings syncs all ID broker mappings for an environment

  Syncs all ID Broker mappings to all datalake clusters in an environment.
*/
func (a *Client) SyncIDBrokerMappings(params *SyncIDBrokerMappingsParams) (*SyncIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncIDBrokerMappingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SyncStatus returns status of the sync operation for the operation id

  Returns status of the sync operation for the operation id. Operation Id should be one of the previously request sync operation.
*/
func (a *Client) SyncStatus(params *SyncStatusParams) (*SyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SyncUser synchronizes environments with single user to the free IP a servers

  Synchronizes environments with single user to the FreeIPA servers.
*/
func (a *Client) SyncUser(params *SyncUserParams) (*SyncUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncUser",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TestAccountTelemetryRules tests anonymization rules for account telemetry against text input

  Test anonymization rules (for account telemetry) against text input.
*/
func (a *Client) TestAccountTelemetryRules(params *TestAccountTelemetryRulesParams) (*TestAccountTelemetryRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestAccountTelemetryRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testAccountTelemetryRules",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/testAccountTelemetryRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestAccountTelemetryRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestAccountTelemetryRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TestAccountTelemetryRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
