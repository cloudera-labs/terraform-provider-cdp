// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncOperationAdditionalDetail Additional detail object for a sync operation.
//
// swagger:model SyncOperationAdditionalDetail
type SyncOperationAdditionalDetail struct {

	// The array of details strings.
	// Required: true
	Details []string `json:"details"`

	// The message string for an additional detail.
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this sync operation additional detail
func (m *SyncOperationAdditionalDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncOperationAdditionalDetail) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *SyncOperationAdditionalDetail) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sync operation additional detail based on context it is used
func (m *SyncOperationAdditionalDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SyncOperationAdditionalDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncOperationAdditionalDetail) UnmarshalBinary(b []byte) error {
	var res SyncOperationAdditionalDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
