// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProxyConfigRequest Request object for a create proxy config request.
//
// swagger:model CreateProxyConfigRequest
type CreateProxyConfigRequest struct {

	// A description for the proxy config.
	Description string `json:"description,omitempty"`

	// The proxy host.
	// Required: true
	Host *string `json:"host"`

	// The proxy password.
	Password string `json:"password,omitempty"`

	// The proxy port.
	// Required: true
	Port *int32 `json:"port"`

	// The protocol.
	// Required: true
	Protocol *string `json:"protocol"`

	// The name of the proxy config.
	// Required: true
	ProxyConfigName *string `json:"proxyConfigName"`

	// The proxy user.
	User string `json:"user,omitempty"`
}

// Validate validates this create proxy config request
func (m *CreateProxyConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyConfigName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProxyConfigRequest) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *CreateProxyConfigRequest) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *CreateProxyConfigRequest) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *CreateProxyConfigRequest) validateProxyConfigName(formats strfmt.Registry) error {

	if err := validate.Required("proxyConfigName", "body", m.ProxyConfigName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProxyConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProxyConfigRequest) UnmarshalBinary(b []byte) error {
	var res CreateProxyConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
