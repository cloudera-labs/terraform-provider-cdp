// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AWSFreeIpaCreationRequest Request object for creating FreeIPA in the environment.
//
// swagger:model AWSFreeIpaCreationRequest
type AWSFreeIpaCreationRequest struct {

	// The number of FreeIPA instances to create per group when creating FreeIPA in the environment
	InstanceCountByGroup int32 `json:"instanceCountByGroup,omitempty"`

	// Custom instance type of FreeIPA instances.
	InstanceType string `json:"instanceType,omitempty"`

	// Flag which marks that the freeIPA will be deployed in a multi-availability zone way or not.
	MultiAz bool `json:"multiAz,omitempty"`

	// Recipes for FreeIPA
	Recipes []string `json:"recipes"`

	// Max hourly price of spot instances.
	// Maximum: 255
	// Minimum: 0.001
	SpotMaxPrice float64 `json:"spotMaxPrice,omitempty"`

	// Percentage of spot instances.
	// Maximum: 100
	// Minimum: 0
	SpotPercentage *int32 `json:"spotPercentage,omitempty"`
}

// Validate validates this a w s free ipa creation request
func (m *AWSFreeIpaCreationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpotMaxPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpotPercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSFreeIpaCreationRequest) validateSpotMaxPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.SpotMaxPrice) { // not required
		return nil
	}

	if err := validate.Minimum("spotMaxPrice", "body", m.SpotMaxPrice, 0.001, false); err != nil {
		return err
	}

	if err := validate.Maximum("spotMaxPrice", "body", m.SpotMaxPrice, 255, false); err != nil {
		return err
	}

	return nil
}

func (m *AWSFreeIpaCreationRequest) validateSpotPercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.SpotPercentage) { // not required
		return nil
	}

	if err := validate.MinimumInt("spotPercentage", "body", int64(*m.SpotPercentage), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("spotPercentage", "body", int64(*m.SpotPercentage), 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this a w s free ipa creation request based on context it is used
func (m *AWSFreeIpaCreationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AWSFreeIpaCreationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSFreeIpaCreationRequest) UnmarshalBinary(b []byte) error {
	var res AWSFreeIpaCreationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
