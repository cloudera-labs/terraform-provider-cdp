// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetConfigFilesRequest Request object for Datalake client configs.
//
// swagger:model GetConfigFilesRequest
type GetConfigFilesRequest struct {

	// A list of service types and role types to get their process configs. The input format must be "serviceType1,roleType1;serviceType2,roleType2". Each service type and its role type maps to a process. Different service type and role type groups are separated by ";" and each service type and its associated role type is separated by ",". The input is case sensitive. If the format is wrong or service is not found, exceptions will be thrown. If no roles are found for the service, no config files for that role and service will be returned. e.g. "HIVE,HIVESERVER2;HUE,HUE_SERVER".
	AdditionalServices string `json:"additionalServices,omitempty"`

	// config file set to retrieve.
	// Enum: [CLIENT KRB TRUSTSTORE_PEM TRUSTSTORE_JKS VAULT_TRUSTSTORE_PEM VAULT_TRUSTSTORE_JKS DATABASE_TRUSTSTORE_PEM DOCKER_TRUSTSTORE_PEM DWX_DB_HOST DWX_DB_PORT DWX_DB_NAME DWX_DB_USERNAME DWX_DB_PASSWORD]
	ConfigSet string `json:"configSet,omitempty"`

	// The CRN of the Datalake
	// Required: true
	DatalakeCrn *string `json:"datalakeCrn"`

	// The Datalakservices to collect client configs.
	ServiceOverrideList []string `json:"serviceOverrideList"`
}

// Validate validates this get config files request
func (m *GetConfigFilesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatalakeCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getConfigFilesRequestTypeConfigSetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLIENT","KRB","TRUSTSTORE_PEM","TRUSTSTORE_JKS","VAULT_TRUSTSTORE_PEM","VAULT_TRUSTSTORE_JKS","DATABASE_TRUSTSTORE_PEM","DOCKER_TRUSTSTORE_PEM","DWX_DB_HOST","DWX_DB_PORT","DWX_DB_NAME","DWX_DB_USERNAME","DWX_DB_PASSWORD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getConfigFilesRequestTypeConfigSetPropEnum = append(getConfigFilesRequestTypeConfigSetPropEnum, v)
	}
}

const (

	// GetConfigFilesRequestConfigSetCLIENT captures enum value "CLIENT"
	GetConfigFilesRequestConfigSetCLIENT string = "CLIENT"

	// GetConfigFilesRequestConfigSetKRB captures enum value "KRB"
	GetConfigFilesRequestConfigSetKRB string = "KRB"

	// GetConfigFilesRequestConfigSetTRUSTSTOREPEM captures enum value "TRUSTSTORE_PEM"
	GetConfigFilesRequestConfigSetTRUSTSTOREPEM string = "TRUSTSTORE_PEM"

	// GetConfigFilesRequestConfigSetTRUSTSTOREJKS captures enum value "TRUSTSTORE_JKS"
	GetConfigFilesRequestConfigSetTRUSTSTOREJKS string = "TRUSTSTORE_JKS"

	// GetConfigFilesRequestConfigSetVAULTTRUSTSTOREPEM captures enum value "VAULT_TRUSTSTORE_PEM"
	GetConfigFilesRequestConfigSetVAULTTRUSTSTOREPEM string = "VAULT_TRUSTSTORE_PEM"

	// GetConfigFilesRequestConfigSetVAULTTRUSTSTOREJKS captures enum value "VAULT_TRUSTSTORE_JKS"
	GetConfigFilesRequestConfigSetVAULTTRUSTSTOREJKS string = "VAULT_TRUSTSTORE_JKS"

	// GetConfigFilesRequestConfigSetDATABASETRUSTSTOREPEM captures enum value "DATABASE_TRUSTSTORE_PEM"
	GetConfigFilesRequestConfigSetDATABASETRUSTSTOREPEM string = "DATABASE_TRUSTSTORE_PEM"

	// GetConfigFilesRequestConfigSetDOCKERTRUSTSTOREPEM captures enum value "DOCKER_TRUSTSTORE_PEM"
	GetConfigFilesRequestConfigSetDOCKERTRUSTSTOREPEM string = "DOCKER_TRUSTSTORE_PEM"

	// GetConfigFilesRequestConfigSetDWXDBHOST captures enum value "DWX_DB_HOST"
	GetConfigFilesRequestConfigSetDWXDBHOST string = "DWX_DB_HOST"

	// GetConfigFilesRequestConfigSetDWXDBPORT captures enum value "DWX_DB_PORT"
	GetConfigFilesRequestConfigSetDWXDBPORT string = "DWX_DB_PORT"

	// GetConfigFilesRequestConfigSetDWXDBNAME captures enum value "DWX_DB_NAME"
	GetConfigFilesRequestConfigSetDWXDBNAME string = "DWX_DB_NAME"

	// GetConfigFilesRequestConfigSetDWXDBUSERNAME captures enum value "DWX_DB_USERNAME"
	GetConfigFilesRequestConfigSetDWXDBUSERNAME string = "DWX_DB_USERNAME"

	// GetConfigFilesRequestConfigSetDWXDBPASSWORD captures enum value "DWX_DB_PASSWORD"
	GetConfigFilesRequestConfigSetDWXDBPASSWORD string = "DWX_DB_PASSWORD"
)

// prop value enum
func (m *GetConfigFilesRequest) validateConfigSetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getConfigFilesRequestTypeConfigSetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetConfigFilesRequest) validateConfigSet(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigSet) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfigSetEnum("configSet", "body", m.ConfigSet); err != nil {
		return err
	}

	return nil
}

func (m *GetConfigFilesRequest) validateDatalakeCrn(formats strfmt.Registry) error {

	if err := validate.Required("datalakeCrn", "body", m.DatalakeCrn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get config files request based on context it is used
func (m *GetConfigFilesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetConfigFilesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetConfigFilesRequest) UnmarshalBinary(b []byte) error {
	var res GetConfigFilesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
