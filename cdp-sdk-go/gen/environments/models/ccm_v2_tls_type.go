// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CcmV2TLSType CCM V2 TLS connectivity types
//
// swagger:model CcmV2TlsType
type CcmV2TLSType string

func NewCcmV2TLSType(value CcmV2TLSType) *CcmV2TLSType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CcmV2TLSType.
func (m CcmV2TLSType) Pointer() *CcmV2TLSType {
	return &m
}

const (

	// CcmV2TLSTypeONEWAYTLS captures enum value "ONE_WAY_TLS"
	CcmV2TLSTypeONEWAYTLS CcmV2TLSType = "ONE_WAY_TLS"

	// CcmV2TLSTypeTWOWAYTLS captures enum value "TWO_WAY_TLS"
	CcmV2TLSTypeTWOWAYTLS CcmV2TLSType = "TWO_WAY_TLS"
)

// for schema
var ccmV2TlsTypeEnum []interface{}

func init() {
	var res []CcmV2TLSType
	if err := json.Unmarshal([]byte(`["ONE_WAY_TLS","TWO_WAY_TLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ccmV2TlsTypeEnum = append(ccmV2TlsTypeEnum, v)
	}
}

func (m CcmV2TLSType) validateCcmV2TLSTypeEnum(path, location string, value CcmV2TLSType) error {
	if err := validate.EnumCase(path, location, value, ccmV2TlsTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ccm v2 Tls type
func (m CcmV2TLSType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCcmV2TLSTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ccm v2 Tls type based on context it is used
func (m CcmV2TLSType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
