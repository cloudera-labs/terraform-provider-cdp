// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExistingAzureNetworkRequest Request object for creating an Azure environment using existing VNet and subnets.
//
// swagger:model ExistingAzureNetworkRequest
type ExistingAzureNetworkRequest struct {

	// The ID of an existing private DNS zone used for the AKS.
	AksPrivateDNSZoneID string `json:"aksPrivateDnsZoneId,omitempty"`

	// The ID of an existing private DNS zone used for the database.
	DatabasePrivateDNSZoneID string `json:"databasePrivateDnsZoneId,omitempty"`

	// The id of the Azure VNet.
	// Required: true
	NetworkID *string `json:"networkId"`

	// The name of the Azure VNet.
	NetworkName string `json:"networkName,omitempty"`

	// The name of the resource group associated with the VNet.
	// Required: true
	ResourceGroupName *string `json:"resourceGroupName"`

	// One or more subnet ids within the VNet.
	// Required: true
	// Unique: true
	SubnetIds []string `json:"subnetIds"`

	// One or more subnet names within the VNet.
	// Unique: true
	SubnetNames []string `json:"subnetNames"`
}

// Validate validates this existing azure network request
func (m *ExistingAzureNetworkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExistingAzureNetworkRequest) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("networkId", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *ExistingAzureNetworkRequest) validateResourceGroupName(formats strfmt.Registry) error {

	if err := validate.Required("resourceGroupName", "body", m.ResourceGroupName); err != nil {
		return err
	}

	return nil
}

func (m *ExistingAzureNetworkRequest) validateSubnetIds(formats strfmt.Registry) error {

	if err := validate.Required("subnetIds", "body", m.SubnetIds); err != nil {
		return err
	}

	if err := validate.UniqueItems("subnetIds", "body", m.SubnetIds); err != nil {
		return err
	}

	return nil
}

func (m *ExistingAzureNetworkRequest) validateSubnetNames(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("subnetNames", "body", m.SubnetNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this existing azure network request based on context it is used
func (m *ExistingAzureNetworkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExistingAzureNetworkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExistingAzureNetworkRequest) UnmarshalBinary(b []byte) error {
	var res ExistingAzureNetworkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
