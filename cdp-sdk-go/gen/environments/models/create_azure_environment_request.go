// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAzureEnvironmentRequest Request object for a create Azure environment request.
//
// swagger:model CreateAzureEnvironmentRequest
type CreateAzureEnvironmentRequest struct {

	// Name of the credential to use for the environment.
	// Required: true
	CredentialName *string `json:"credentialName"`

	// An description of the environment.
	Description string `json:"description,omitempty"`

	// Whether to enable SSH tunnelling for the environment.
	EnableTunnel bool `json:"enableTunnel,omitempty"`

	// When this is enabled, diagnostic information about job and query execution is sent to Workload Manager for Data Hub clusters created within this environment.
	EnableWorkloadAnalytics bool `json:"enableWorkloadAnalytics,omitempty"`

	// The name of the environment. Must contain only lowercase letters, numbers and hyphens.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Parameters needed to use an existing VNet and Subnets.
	ExistingNetworkParams *ExistingAzureNetworkRequest `json:"existingNetworkParams,omitempty"`

	// The FreeIPA creation request for the environment
	FreeIpa *AzureFreeIpaCreationRequest `json:"freeIpa,omitempty"`

	// Azure storage configuration for cluster and audit logs.
	// Required: true
	LogStorage *AzureLogStorageRequest `json:"logStorage"`

	// new network params
	NewNetworkParams *CreateAzureEnvironmentRequestNewNetworkParams `json:"newNetworkParams,omitempty"`

	// Name of the proxy config to use for the environment.
	ProxyConfigName string `json:"proxyConfigName,omitempty"`

	// Public SSH key string. The associated private key can be used to get root-level access to the Data Lake instance and Data Hub cluster instances.
	// Required: true
	PublicKey *string `json:"publicKey"`

	// The region of the environment.
	// Required: true
	Region *string `json:"region"`

	// When true, this will report additional diagnostic information back to Cloudera.
	ReportDeploymentLogs bool `json:"reportDeploymentLogs,omitempty"`

	// Security control for FreeIPA and Datalake deployment.
	// Required: true
	SecurityAccess *SecurityAccessRequest `json:"securityAccess"`

	// Tags associated with the resources.
	Tags []*TagRequest `json:"tags"`

	// Whether to associate public ip's to the resources within the network.
	// Required: true
	UsePublicIP *bool `json:"usePublicIp"`
}

// Validate validates this create azure environment request
func (m *CreateAzureEnvironmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingNetworkParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeIpa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewNetworkParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsePublicIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAzureEnvironmentRequest) validateCredentialName(formats strfmt.Registry) error {

	if err := validate.Required("credentialName", "body", m.CredentialName); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateExistingNetworkParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ExistingNetworkParams) { // not required
		return nil
	}

	if m.ExistingNetworkParams != nil {
		if err := m.ExistingNetworkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existingNetworkParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateFreeIpa(formats strfmt.Registry) error {

	if swag.IsZero(m.FreeIpa) { // not required
		return nil
	}

	if m.FreeIpa != nil {
		if err := m.FreeIpa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeIpa")
			}
			return err
		}
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateLogStorage(formats strfmt.Registry) error {

	if err := validate.Required("logStorage", "body", m.LogStorage); err != nil {
		return err
	}

	if m.LogStorage != nil {
		if err := m.LogStorage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logStorage")
			}
			return err
		}
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateNewNetworkParams(formats strfmt.Registry) error {

	if swag.IsZero(m.NewNetworkParams) { // not required
		return nil
	}

	if m.NewNetworkParams != nil {
		if err := m.NewNetworkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newNetworkParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateSecurityAccess(formats strfmt.Registry) error {

	if err := validate.Required("securityAccess", "body", m.SecurityAccess); err != nil {
		return err
	}

	if m.SecurityAccess != nil {
		if err := m.SecurityAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityAccess")
			}
			return err
		}
	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAzureEnvironmentRequest) validateUsePublicIP(formats strfmt.Registry) error {

	if err := validate.Required("usePublicIp", "body", m.UsePublicIP); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAzureEnvironmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAzureEnvironmentRequest) UnmarshalBinary(b []byte) error {
	var res CreateAzureEnvironmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateAzureEnvironmentRequestNewNetworkParams Parameteres needed to automatically create VNet and Subnets.
//
// swagger:model CreateAzureEnvironmentRequestNewNetworkParams
type CreateAzureEnvironmentRequestNewNetworkParams struct {

	// The range of private IPv4 addresses that resources will use under the created VNet.
	// Required: true
	NetworkCidr *string `json:"networkCidr"`
}

// Validate validates this create azure environment request new network params
func (m *CreateAzureEnvironmentRequestNewNetworkParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkCidr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAzureEnvironmentRequestNewNetworkParams) validateNetworkCidr(formats strfmt.Registry) error {

	if err := validate.Required("newNetworkParams"+"."+"networkCidr", "body", m.NetworkCidr); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAzureEnvironmentRequestNewNetworkParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAzureEnvironmentRequestNewNetworkParams) UnmarshalBinary(b []byte) error {
	var res CreateAzureEnvironmentRequestNewNetworkParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
