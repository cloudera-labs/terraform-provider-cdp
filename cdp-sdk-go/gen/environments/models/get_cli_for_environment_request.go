// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetCliForEnvironmentRequest Request object for generating a create environment CLI command.
//
// swagger:model GetCliForEnvironmentRequest
type GetCliForEnvironmentRequest struct {

	// cloud provider for the command
	CommandCloudProvider CloudProviderType `json:"commandCloudProvider,omitempty"`

	// cloudbreak environment request object of the private API, encoded in base64
	CommandRequestInput string `json:"commandRequestInput,omitempty"`

	// cloudbreak environment response object of the private API, encoded in base64
	CommandResponseInput string `json:"commandResponseInput,omitempty"`
}

// Validate validates this get cli for environment request
func (m *GetCliForEnvironmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCliForEnvironmentRequest) validateCommandCloudProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.CommandCloudProvider) { // not required
		return nil
	}

	if err := m.CommandCloudProvider.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("commandCloudProvider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("commandCloudProvider")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get cli for environment request based on the context it is used
func (m *GetCliForEnvironmentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommandCloudProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCliForEnvironmentRequest) contextValidateCommandCloudProvider(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CommandCloudProvider.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("commandCloudProvider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("commandCloudProvider")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCliForEnvironmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCliForEnvironmentRequest) UnmarshalBinary(b []byte) error {
	var res GetCliForEnvironmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
