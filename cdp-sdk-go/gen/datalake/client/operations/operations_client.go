// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BackupDatalake(params *BackupDatalakeParams) (*BackupDatalakeOK, error)

	BackupDatalakeStatus(params *BackupDatalakeStatusParams) (*BackupDatalakeStatusOK, error)

	CreateAWSDatalake(params *CreateAWSDatalakeParams) (*CreateAWSDatalakeOK, error)

	CreateAzureDatalake(params *CreateAzureDatalakeParams) (*CreateAzureDatalakeOK, error)

	DeleteDatalake(params *DeleteDatalakeParams) (*DeleteDatalakeOK, error)

	DescribeDatalake(params *DescribeDatalakeParams) (*DescribeDatalakeOK, error)

	GetClusterHostStatus(params *GetClusterHostStatusParams) (*GetClusterHostStatusOK, error)

	GetClusterServiceStatus(params *GetClusterServiceStatusParams) (*GetClusterServiceStatusOK, error)

	ListDatalakeBackups(params *ListDatalakeBackupsParams) (*ListDatalakeBackupsOK, error)

	ListDatalakes(params *ListDatalakesParams) (*ListDatalakesOK, error)

	ListRuntimes(params *ListRuntimesParams) (*ListRuntimesOK, error)

	RepairDatalake(params *RepairDatalakeParams) (*RepairDatalakeOK, error)

	RestoreDatalake(params *RestoreDatalakeParams) (*RestoreDatalakeOK, error)

	RestoreDatalakeStatus(params *RestoreDatalakeStatusParams) (*RestoreDatalakeStatusOK, error)

	StartDatalake(params *StartDatalakeParams) (*StartDatalakeOK, error)

	StopDatalake(params *StopDatalakeParams) (*StopDatalakeOK, error)

	UpgradeDatalake(params *UpgradeDatalakeParams) (*UpgradeDatalakeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BackupDatalake creates backup of datalake

  Takes a backup all the data in the datalake.
*/
func (a *Client) BackupDatalake(params *BackupDatalakeParams) (*BackupDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/backupDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BackupDatalakeStatus checks status of the last datalake backup

  Checks status of last datalake backup and gives more information.
*/
func (a *Client) BackupDatalakeStatus(params *BackupDatalakeStatusParams) (*BackupDatalakeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupDatalakeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "backupDatalakeStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/backupDatalakeStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupDatalakeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupDatalakeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupDatalakeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAWSDatalake creates an a w s datalake

  Creates an AWS datalake.
*/
func (a *Client) CreateAWSDatalake(params *CreateAWSDatalakeParams) (*CreateAWSDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAWSDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/createAWSDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAzureDatalake creates an azure datalake

  Creates an Azure datalake.
*/
func (a *Client) CreateAzureDatalake(params *CreateAzureDatalakeParams) (*CreateAzureDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/createAzureDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDatalake deletes a datalake

  Deletes a datalake.
*/
func (a *Client) DeleteDatalake(params *DeleteDatalakeParams) (*DeleteDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/deleteDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeDatalake describes a datalake

  Describes a datalake.
*/
func (a *Client) DescribeDatalake(params *DescribeDatalakeParams) (*DescribeDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/describeDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClusterHostStatus gets cluster host status

  Gets the status of the hosts in a cluster.
*/
func (a *Client) GetClusterHostStatus(params *GetClusterHostStatusParams) (*GetClusterHostStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterHostStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterHostStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/getClusterHostStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterHostStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterHostStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterHostStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClusterServiceStatus gets cluster service status

  Gets the status of the services in a cluster.
*/
func (a *Client) GetClusterServiceStatus(params *GetClusterServiceStatusParams) (*GetClusterServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterServiceStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/getClusterServiceStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterServiceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListDatalakeBackups lists all the backup operations that were performed on the datalake

  List all the backup operations that were performed on the datalake.
*/
func (a *Client) ListDatalakeBackups(params *ListDatalakeBackupsParams) (*ListDatalakeBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatalakeBackupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDatalakeBackups",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/listDatalakeBackups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDatalakeBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatalakeBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatalakeBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListDatalakes lists datalakes

  Lists datalakes.
*/
func (a *Client) ListDatalakes(params *ListDatalakesParams) (*ListDatalakesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatalakesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDatalakes",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/listDatalakes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDatalakesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatalakesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatalakesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListRuntimes lists the datalake versions

  Lists the available datalake runtime versions.
*/
func (a *Client) ListRuntimes(params *ListRuntimesParams) (*ListRuntimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRuntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRuntimes",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/listRuntimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRuntimesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRuntimesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRuntimesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepairDatalake repairs a datalake

  Repairs a datalake.
*/
func (a *Client) RepairDatalake(params *RepairDatalakeParams) (*RepairDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/repairDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RepairDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepairDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepairDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RestoreDatalake restores the datalake from the last backup

  Restore the datalake from the data backedup in the last backup.
*/
func (a *Client) RestoreDatalake(params *RestoreDatalakeParams) (*RestoreDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restoreDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/restoreDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestoreDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RestoreDatalakeStatus checks the status of aws datalake restore operation

  Check the status of aws datalake restore operation.
*/
func (a *Client) RestoreDatalakeStatus(params *RestoreDatalakeStatusParams) (*RestoreDatalakeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreDatalakeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restoreDatalakeStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/restoreDatalakeStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreDatalakeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreDatalakeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestoreDatalakeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartDatalake starts datalake

  Starts a stopped Datalake
*/
func (a *Client) StartDatalake(params *StartDatalakeParams) (*StartDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/startDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StopDatalake stops datalake

  Stops a running Datalake
*/
func (a *Client) StopDatalake(params *StopDatalakeParams) (*StopDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/stopDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpgradeDatalake os s or data platform upgrade for the s d x cluster

  OS or data platform upgrade for the SDX cluster. You need to specify either one of image-id, runtime or lock-components to proceed.
*/
func (a *Client) UpgradeDatalake(params *UpgradeDatalakeParams) (*UpgradeDatalakeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeDatalakeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeDatalake",
		Method:             "POST",
		PathPattern:        "/api/v1/datalake/upgradeDatalake",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeDatalakeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeDatalakeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeDatalakeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
