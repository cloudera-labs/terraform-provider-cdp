// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreDatalakeResponse Response object to a request to perform restore of datalake.
//
// swagger:model RestoreDatalakeResponse
type RestoreDatalakeResponse struct {

	// Account where the datalake exists.
	// Required: true
	AccountID *string `json:"accountId"`

	// Location of the backup to be used to perform restore.
	// Required: true
	BackupLocation *string `json:"backupLocation"`

	// Name of the backup.
	BackupName string `json:"backupName,omitempty"`

	// Time when the backup operation ended.
	// Required: true
	EndTime *string `json:"endTime"`

	// Reason for the failure.
	FailureReason string `json:"failureReason,omitempty"`

	// Provides the details of internal state where is backup operation stands.
	// Required: true
	InternalState *string `json:"internalState"`

	// Time when the backup operation started.
	// Required: true
	StartTime *string `json:"startTime"`

	// Provide the current status.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this restore datalake response
func (m *RestoreDatalakeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreDatalakeResponse) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeResponse) validateBackupLocation(formats strfmt.Registry) error {

	if err := validate.Required("backupLocation", "body", m.BackupLocation); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeResponse) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeResponse) validateInternalState(formats strfmt.Registry) error {

	if err := validate.Required("internalState", "body", m.InternalState); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeResponse) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreDatalakeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreDatalakeResponse) UnmarshalBinary(b []byte) error {
	var res RestoreDatalakeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
