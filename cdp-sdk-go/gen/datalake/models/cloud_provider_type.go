// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CloudProviderType Supported cloud providers in CLI generate commands
//
// swagger:model CloudProviderType
type CloudProviderType string

func NewCloudProviderType(value CloudProviderType) *CloudProviderType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CloudProviderType.
func (m CloudProviderType) Pointer() *CloudProviderType {
	return &m
}

const (

	// CloudProviderTypeAWS captures enum value "AWS"
	CloudProviderTypeAWS CloudProviderType = "AWS"

	// CloudProviderTypeAWSGOV captures enum value "AWS_GOV"
	CloudProviderTypeAWSGOV CloudProviderType = "AWS_GOV"

	// CloudProviderTypeAZURE captures enum value "AZURE"
	CloudProviderTypeAZURE CloudProviderType = "AZURE"

	// CloudProviderTypeGCP captures enum value "GCP"
	CloudProviderTypeGCP CloudProviderType = "GCP"
)

// for schema
var cloudProviderTypeEnum []interface{}

func init() {
	var res []CloudProviderType
	if err := json.Unmarshal([]byte(`["AWS","AWS_GOV","AZURE","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudProviderTypeEnum = append(cloudProviderTypeEnum, v)
	}
}

func (m CloudProviderType) validateCloudProviderTypeEnum(path, location string, value CloudProviderType) error {
	if err := validate.EnumCase(path, location, value, cloudProviderTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cloud provider type
func (m CloudProviderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCloudProviderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cloud provider type based on context it is used
func (m CloudProviderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
