// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupDatalakeRequest Request object to perform a backup of datalake.
//
// swagger:model BackupDatalakeRequest
type BackupDatalakeRequest struct {

	// Location where the back-up has to be stored.
	// Required: true
	BackupLocation *string `json:"backupLocation"`

	// The name of the backup.
	BackupName string `json:"backupName,omitempty"`

	// The name of the datalake.
	// Required: true
	DatalakeName *string `json:"datalakeName"`
}

// Validate validates this backup datalake request
func (m *BackupDatalakeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatalakeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupDatalakeRequest) validateBackupLocation(formats strfmt.Registry) error {

	if err := validate.Required("backupLocation", "body", m.BackupLocation); err != nil {
		return err
	}

	return nil
}

func (m *BackupDatalakeRequest) validateDatalakeName(formats strfmt.Registry) error {

	if err := validate.Required("datalakeName", "body", m.DatalakeName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupDatalakeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupDatalakeRequest) UnmarshalBinary(b []byte) error {
	var res BackupDatalakeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
