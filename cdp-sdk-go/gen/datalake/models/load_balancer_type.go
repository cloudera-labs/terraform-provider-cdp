// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LoadBalancerType Whether the load balancer is internet-facing (public), only accessible over private endpoints or setup only to route traffic outbound.
//
// swagger:model LoadBalancerType
type LoadBalancerType string

func NewLoadBalancerType(value LoadBalancerType) *LoadBalancerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LoadBalancerType.
func (m LoadBalancerType) Pointer() *LoadBalancerType {
	return &m
}

const (

	// LoadBalancerTypePUBLIC captures enum value "PUBLIC"
	LoadBalancerTypePUBLIC LoadBalancerType = "PUBLIC"

	// LoadBalancerTypePRIVATE captures enum value "PRIVATE"
	LoadBalancerTypePRIVATE LoadBalancerType = "PRIVATE"

	// LoadBalancerTypeOUTBOUND captures enum value "OUTBOUND"
	LoadBalancerTypeOUTBOUND LoadBalancerType = "OUTBOUND"
)

// for schema
var loadBalancerTypeEnum []interface{}

func init() {
	var res []LoadBalancerType
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE","OUTBOUND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loadBalancerTypeEnum = append(loadBalancerTypeEnum, v)
	}
}

func (m LoadBalancerType) validateLoadBalancerTypeEnum(path, location string, value LoadBalancerType) error {
	if err := validate.EnumCase(path, location, value, loadBalancerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this load balancer type
func (m LoadBalancerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLoadBalancerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this load balancer type based on context it is used
func (m LoadBalancerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
