// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAzureDatalakeRequest Request object for create Azure datalake request.
//
// swagger:model CreateAzureDatalakeRequest
type CreateAzureDatalakeRequest struct {

	// Azure configuration.
	CloudProviderConfiguration *AzureConfigurationRequest `json:"cloudProviderConfiguration,omitempty"`

	// This is an optional field. This is for QE testing purposes and internal use only. QE can pass this to modify database availability type.
	DatabaseAvailabilityType DatabaseAvailabilityType `json:"databaseAvailabilityType,omitempty"`

	// The datalake name. This name must be unique, must have between 5 and 100 characters, and must contain only lowercase letters, numbers and hyphens. Names are case-sensitive.
	// Required: true
	// Max Length: 100
	// Min Length: 5
	DatalakeName *string `json:"datalakeName"`

	// The datalake template to use for internal datalake creation.
	DatalakeTemplate string `json:"datalakeTemplate,omitempty"`

	// The environment name or CRN.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// This is an optional field. This is for QE testing purposes and internal use only. QE can pass this filed runtime to point different versions of underneath DP to different versions of underneath DP.
	Runtime string `json:"runtime,omitempty"`

	// The scale of the datalake.
	Scale string `json:"scale,omitempty"`

	// Tags to be added to Datalake related resources.
	Tags []*DatalakeResourceTagRequest `json:"tags"`
}

// Validate validates this create azure datalake request
func (m *CreateAzureDatalakeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProviderConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseAvailabilityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatalakeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAzureDatalakeRequest) validateCloudProviderConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudProviderConfiguration) { // not required
		return nil
	}

	if m.CloudProviderConfiguration != nil {
		if err := m.CloudProviderConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudProviderConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *CreateAzureDatalakeRequest) validateDatabaseAvailabilityType(formats strfmt.Registry) error {

	if swag.IsZero(m.DatabaseAvailabilityType) { // not required
		return nil
	}

	if err := m.DatabaseAvailabilityType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("databaseAvailabilityType")
		}
		return err
	}

	return nil
}

func (m *CreateAzureDatalakeRequest) validateDatalakeName(formats strfmt.Registry) error {

	if err := validate.Required("datalakeName", "body", m.DatalakeName); err != nil {
		return err
	}

	if err := validate.MinLength("datalakeName", "body", string(*m.DatalakeName), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("datalakeName", "body", string(*m.DatalakeName), 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureDatalakeRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureDatalakeRequest) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAzureDatalakeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAzureDatalakeRequest) UnmarshalBinary(b []byte) error {
	var res CreateAzureDatalakeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
