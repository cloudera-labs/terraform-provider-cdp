// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAWSCluster(params *CreateAWSClusterParams) (*CreateAWSClusterOK, error)

	CreateAutoScaleRules(params *CreateAutoScaleRulesParams) (*CreateAutoScaleRulesOK, error)

	CreateAzureCluster(params *CreateAzureClusterParams) (*CreateAzureClusterOK, error)

	CreateClusterDefinition(params *CreateClusterDefinitionParams) (*CreateClusterDefinitionOK, error)

	CreateClusterTemplate(params *CreateClusterTemplateParams) (*CreateClusterTemplateOK, error)

	CreateRecipe(params *CreateRecipeParams) (*CreateRecipeOK, error)

	DeleteAutoScaleRules(params *DeleteAutoScaleRulesParams) (*DeleteAutoScaleRulesOK, error)

	DeleteCluster(params *DeleteClusterParams) (*DeleteClusterOK, error)

	DeleteClusterDefinitions(params *DeleteClusterDefinitionsParams) (*DeleteClusterDefinitionsOK, error)

	DeleteClusterTemplates(params *DeleteClusterTemplatesParams) (*DeleteClusterTemplatesOK, error)

	DeleteInstances(params *DeleteInstancesParams) (*DeleteInstancesOK, error)

	DeleteRecipes(params *DeleteRecipesParams) (*DeleteRecipesOK, error)

	DescribeAutoScaleRules(params *DescribeAutoScaleRulesParams) (*DescribeAutoScaleRulesOK, error)

	DescribeCluster(params *DescribeClusterParams) (*DescribeClusterOK, error)

	DescribeClusterDefinition(params *DescribeClusterDefinitionParams) (*DescribeClusterDefinitionOK, error)

	DescribeClusterTemplate(params *DescribeClusterTemplateParams) (*DescribeClusterTemplateOK, error)

	DescribeRecipe(params *DescribeRecipeParams) (*DescribeRecipeOK, error)

	GetClusterHostStatus(params *GetClusterHostStatusParams) (*GetClusterHostStatusOK, error)

	GetClusterServiceStatus(params *GetClusterServiceStatusParams) (*GetClusterServiceStatusOK, error)

	ListClusterDefinitions(params *ListClusterDefinitionsParams) (*ListClusterDefinitionsOK, error)

	ListClusterTemplates(params *ListClusterTemplatesParams) (*ListClusterTemplatesOK, error)

	ListClusters(params *ListClustersParams) (*ListClustersOK, error)

	ListRecipes(params *ListRecipesParams) (*ListRecipesOK, error)

	RepairCluster(params *RepairClusterParams) (*RepairClusterOK, error)

	RetryCluster(params *RetryClusterParams) (*RetryClusterOK, error)

	ScaleCluster(params *ScaleClusterParams) (*ScaleClusterOK, error)

	StartCluster(params *StartClusterParams) (*StartClusterOK, error)

	StopCluster(params *StopClusterParams) (*StopClusterOK, error)

	SyncCluster(params *SyncClusterParams) (*SyncClusterOK, error)

	UpdateAutoScaleRules(params *UpdateAutoScaleRulesParams) (*UpdateAutoScaleRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAWSCluster creates an a w s workload cluster

  Creates an AWS workload cluster.
*/
func (a *Client) CreateAWSCluster(params *CreateAWSClusterParams) (*CreateAWSClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAWSCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createAWSCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAutoScaleRules creates auto scaling rules for a data hub cluster

  Create Auto Scaling rules for a DataHub cluster.
*/
func (a *Client) CreateAutoScaleRules(params *CreateAutoScaleRulesParams) (*CreateAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAutoScaleRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateAzureCluster creates an azure workload cluster

  Creates an Azure workload cluster.
*/
func (a *Client) CreateAzureCluster(params *CreateAzureClusterParams) (*CreateAzureClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createAzureCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateClusterDefinition creates a cluster definition a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

  Creates a cluster definition. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) CreateClusterDefinition(params *CreateClusterDefinitionParams) (*CreateClusterDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterDefinition",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createClusterDefinition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateClusterDefinitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateClusterTemplate creates a cluster template a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

  Creates a cluster template. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) CreateClusterTemplate(params *CreateClusterTemplateParams) (*CreateClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterTemplate",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createClusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateClusterTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateRecipe creates recipe a recipe is a script that runs on all nodes of a specified instance group

  Creates recipe. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) CreateRecipe(params *CreateRecipeParams) (*CreateRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRecipe",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createRecipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRecipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteAutoScaleRules deletes auto scaling policies for a data hub cluster

  Delete AutoScaling policies for a DataHub cluster
*/
func (a *Client) DeleteAutoScaleRules(params *DeleteAutoScaleRulesParams) (*DeleteAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAutoScaleRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteCluster deletes a workload cluster

  Deletes a workload cluster.
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams) (*DeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteClusterDefinitions deletes cluster definitions a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

  Deletes cluster definitions. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) DeleteClusterDefinitions(params *DeleteClusterDefinitionsParams) (*DeleteClusterDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterDefinitions",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteClusterDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteClusterTemplates deletes cluster templates a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

  Deletes cluster templates. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) DeleteClusterTemplates(params *DeleteClusterTemplatesParams) (*DeleteClusterTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterTemplates",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteClusterTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteInstances deletes instances for the specified cluster

  Deletes instances for the specified cluster.
*/
func (a *Client) DeleteInstances(params *DeleteInstancesParams) (*DeleteInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstances",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteRecipes deletes recipes a recipe is a script that runs on all nodes of a specified instance group

  Deletes recipes. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) DeleteRecipes(params *DeleteRecipesParams) (*DeleteRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecipesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeAutoScaleRules describes the auto scaling policies for a data hub cluster

  Describe the AutoScaling policies for a DataHub cluster
*/
func (a *Client) DescribeAutoScaleRules(params *DescribeAutoScaleRulesParams) (*DescribeAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAutoScaleRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeCluster describes a workload cluster

  Describes a workload cluster.
*/
func (a *Client) DescribeCluster(params *DescribeClusterParams) (*DescribeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeClusterDefinition describes a cluster definition a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

  Describes a cluster definition. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) DescribeClusterDefinition(params *DescribeClusterDefinitionParams) (*DescribeClusterDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeClusterDefinition",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeClusterDefinition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClusterDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClusterDefinitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeClusterTemplate describes a cluster template a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

  Describes a cluster template. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) DescribeClusterTemplate(params *DescribeClusterTemplateParams) (*DescribeClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeClusterTemplate",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeClusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClusterTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClusterTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeRecipe describes recipe a recipe is a script that runs on all nodes of a specified instance group

  Describes recipe. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) DescribeRecipe(params *DescribeRecipeParams) (*DescribeRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeRecipe",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeRecipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeRecipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClusterHostStatus gets cluster host status

  Gets the status of the hosts in a cluster.
*/
func (a *Client) GetClusterHostStatus(params *GetClusterHostStatusParams) (*GetClusterHostStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterHostStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterHostStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/getClusterHostStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterHostStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterHostStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterHostStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClusterServiceStatus gets cluster service status

  Gets the status of the services in a cluster.
*/
func (a *Client) GetClusterServiceStatus(params *GetClusterServiceStatusParams) (*GetClusterServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterServiceStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/getClusterServiceStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterServiceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListClusterDefinitions lists cluster definitions a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

  Lists cluster definitions. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) ListClusterDefinitions(params *ListClusterDefinitionsParams) (*ListClusterDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterDefinitions",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusterDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClusterDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClusterDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListClusterTemplates lists cluster templates a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

  Lists cluster templates. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) ListClusterTemplates(params *ListClusterTemplatesParams) (*ListClusterTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterTemplates",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusterTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClusterTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClusterTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListClusters lists workload clusters

  Lists workload clusters.
*/
func (a *Client) ListClusters(params *ListClustersParams) (*ListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusters",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListRecipes lists recipes a recipe is a script that runs on all nodes of a specified instance group

  Lists recipes. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) ListRecipes(params *ListRecipesParams) (*ListRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRecipesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepairCluster repairs a cluster

  Repairs a cluster.
*/
func (a *Client) RepairCluster(params *RepairClusterParams) (*RepairClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/repairCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RepairClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepairClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepairClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RetryCluster retries creation of a failed workload cluster

  When stack provisioning or cluster creation fails, retryCluster allows you to resume the process from the last failed step.
*/
func (a *Client) RetryCluster(params *RetryClusterParams) (*RetryClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/retryCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetryClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetryClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RetryClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScaleCluster scales a cluster by adding or removing cluster nodes

  Scales a cluster by adding or removing cluster nodes.
*/
func (a *Client) ScaleCluster(params *ScaleClusterParams) (*ScaleClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScaleClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scaleCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/scaleCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScaleClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScaleClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScaleClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StartCluster starts a stopped workload cluster

  Starts a stopped workload cluster.
*/
func (a *Client) StartCluster(params *StartClusterParams) (*StartClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/startCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StopCluster stops a workload cluster

  Stops a workload cluster. When a cluster is put in the stopped state, cluster VMs are given back to the cloud provider. To provision new VMs, start the cluster.
*/
func (a *Client) StopCluster(params *StopClusterParams) (*StopClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/stopCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SyncCluster synchronizes the state of a cluster with the cloud provider and cloudera manager

  Synchronizes the state of a cluster with the cloud provider and Cloudera Manager.
*/
func (a *Client) SyncCluster(params *SyncClusterParams) (*SyncClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/syncCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateAutoScaleRules modifies auto scaling for a data hub cluster

  Modify AutoScaling for a DataHub cluster
*/
func (a *Client) UpdateAutoScaleRules(params *UpdateAutoScaleRulesParams) (*UpdateAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAutoScaleRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/updateAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
