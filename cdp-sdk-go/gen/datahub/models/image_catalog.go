// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageCatalog Image catalog details object.
//
// swagger:model ImageCatalog
type ImageCatalog struct {

	// Creation time of the image catalog in long.
	Created int64 `json:"created,omitempty"`

	// Creator of the image catalog.
	Creator string `json:"creator,omitempty"`

	// The unique crn of the image catalog.
	Crn string `json:"crn,omitempty"`

	// Description of the image catalog.
	// Max Length: 100
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// Name of the image catalog.
	// Required: true
	// Max Length: 100
	// Min Length: 5
	Name *string `json:"name"`

	// Url of the image catalog.
	// Required: true
	URL *string `json:"url"`

	// true if image catalog is the default one.
	// Required: true
	UsedAsDefault *bool `json:"usedAsDefault"`
}

// Validate validates this image catalog
func (m *ImageCatalog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedAsDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageCatalog) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 100); err != nil {
		return err
	}

	return nil
}

func (m *ImageCatalog) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *ImageCatalog) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *ImageCatalog) validateUsedAsDefault(formats strfmt.Registry) error {

	if err := validate.Required("usedAsDefault", "body", m.UsedAsDefault); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image catalog based on context it is used
func (m *ImageCatalog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageCatalog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageCatalog) UnmarshalBinary(b []byte) error {
	var res ImageCatalog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
