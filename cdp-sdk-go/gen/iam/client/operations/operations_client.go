// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptTerms(params *AcceptTermsParams) (*AcceptTermsOK, error)

	AddMachineUserToGroup(params *AddMachineUserToGroupParams) (*AddMachineUserToGroupOK, error)

	AddSSHPublicKey(params *AddSSHPublicKeyParams) (*AddSSHPublicKeyOK, error)

	AddUserToGroup(params *AddUserToGroupParams) (*AddUserToGroupOK, error)

	AssignAzureCloudIdentity(params *AssignAzureCloudIdentityParams) (*AssignAzureCloudIdentityOK, error)

	AssignGroupResourceRole(params *AssignGroupResourceRoleParams) (*AssignGroupResourceRoleOK, error)

	AssignGroupRole(params *AssignGroupRoleParams) (*AssignGroupRoleOK, error)

	AssignMachineUserResourceRole(params *AssignMachineUserResourceRoleParams) (*AssignMachineUserResourceRoleOK, error)

	AssignMachineUserRole(params *AssignMachineUserRoleParams) (*AssignMachineUserRoleOK, error)

	AssignServicePrincipalAzureCloudIdentity(params *AssignServicePrincipalAzureCloudIdentityParams) (*AssignServicePrincipalAzureCloudIdentityOK, error)

	AssignUserResourceRole(params *AssignUserResourceRoleParams) (*AssignUserResourceRoleOK, error)

	AssignUserRole(params *AssignUserRoleParams) (*AssignUserRoleOK, error)

	CheckRights(params *CheckRightsParams) (*CheckRightsOK, error)

	CreateGroup(params *CreateGroupParams) (*CreateGroupOK, error)

	CreateLdapProvider(params *CreateLdapProviderParams) (*CreateLdapProviderOK, error)

	CreateMachineUser(params *CreateMachineUserParams) (*CreateMachineUserOK, error)

	CreateMachineUserAccessKey(params *CreateMachineUserAccessKeyParams) (*CreateMachineUserAccessKeyOK, error)

	CreateSamlProvider(params *CreateSamlProviderParams) (*CreateSamlProviderOK, error)

	CreateUser(params *CreateUserParams) (*CreateUserOK, error)

	CreateUserAccessKey(params *CreateUserAccessKeyParams) (*CreateUserAccessKeyOK, error)

	DeleteAccessKey(params *DeleteAccessKeyParams) (*DeleteAccessKeyOK, error)

	DeleteGroup(params *DeleteGroupParams) (*DeleteGroupOK, error)

	DeleteMachineUser(params *DeleteMachineUserParams) (*DeleteMachineUserOK, error)

	DeleteSamlProvider(params *DeleteSamlProviderParams) (*DeleteSamlProviderOK, error)

	DeleteSSHPublicKey(params *DeleteSSHPublicKeyParams) (*DeleteSSHPublicKeyOK, error)

	DeleteUser(params *DeleteUserParams) (*DeleteUserOK, error)

	DescribeLdapProvider(params *DescribeLdapProviderParams) (*DescribeLdapProviderOK, error)

	DescribeSamlProvider(params *DescribeSamlProviderParams) (*DescribeSamlProviderOK, error)

	DescribeSSHPublicKey(params *DescribeSSHPublicKeyParams) (*DescribeSSHPublicKeyOK, error)

	DescribeTerms(params *DescribeTermsParams) (*DescribeTermsOK, error)

	DisableClouderaSSOLogin(params *DisableClouderaSSOLoginParams) (*DisableClouderaSSOLoginOK, error)

	EnableClouderaSSOLogin(params *EnableClouderaSSOLoginParams) (*EnableClouderaSSOLoginOK, error)

	GetAccessKey(params *GetAccessKeyParams) (*GetAccessKeyOK, error)

	GetAccount(params *GetAccountParams) (*GetAccountOK, error)

	GetAccountMessages(params *GetAccountMessagesParams) (*GetAccountMessagesOK, error)

	GetAssigneeAuthorizationInformation(params *GetAssigneeAuthorizationInformationParams) (*GetAssigneeAuthorizationInformationOK, error)

	GetUser(params *GetUserParams) (*GetUserOK, error)

	InitiateSupportCase(params *InitiateSupportCaseParams) (*InitiateSupportCaseOK, error)

	ListAccessKeys(params *ListAccessKeysParams) (*ListAccessKeysOK, error)

	ListEntitlements(params *ListEntitlementsParams) (*ListEntitlementsOK, error)

	ListGroupAssignedResourceRoles(params *ListGroupAssignedResourceRolesParams) (*ListGroupAssignedResourceRolesOK, error)

	ListGroupAssignedRoles(params *ListGroupAssignedRolesParams) (*ListGroupAssignedRolesOK, error)

	ListGroupMembers(params *ListGroupMembersParams) (*ListGroupMembersOK, error)

	ListGroups(params *ListGroupsParams) (*ListGroupsOK, error)

	ListGroupsForMachineUser(params *ListGroupsForMachineUserParams) (*ListGroupsForMachineUserOK, error)

	ListGroupsForUser(params *ListGroupsForUserParams) (*ListGroupsForUserOK, error)

	ListLdapProviders(params *ListLdapProvidersParams) (*ListLdapProvidersOK, error)

	ListMachineUserAssignedResourceRoles(params *ListMachineUserAssignedResourceRolesParams) (*ListMachineUserAssignedResourceRolesOK, error)

	ListMachineUserAssignedRoles(params *ListMachineUserAssignedRolesParams) (*ListMachineUserAssignedRolesOK, error)

	ListMachineUsers(params *ListMachineUsersParams) (*ListMachineUsersOK, error)

	ListResourceAssignees(params *ListResourceAssigneesParams) (*ListResourceAssigneesOK, error)

	ListResourceRoleAssignments(params *ListResourceRoleAssignmentsParams) (*ListResourceRoleAssignmentsOK, error)

	ListResourceRoles(params *ListResourceRolesParams) (*ListResourceRolesOK, error)

	ListRoles(params *ListRolesParams) (*ListRolesOK, error)

	ListSamlProviders(params *ListSamlProvidersParams) (*ListSamlProvidersOK, error)

	ListSSHPublicKeys(params *ListSSHPublicKeysParams) (*ListSSHPublicKeysOK, error)

	ListTerms(params *ListTermsParams) (*ListTermsOK, error)

	ListUserAssignedResourceRoles(params *ListUserAssignedResourceRolesParams) (*ListUserAssignedResourceRolesOK, error)

	ListUserAssignedRoles(params *ListUserAssignedRolesParams) (*ListUserAssignedRolesOK, error)

	ListUsers(params *ListUsersParams) (*ListUsersOK, error)

	RemoveMachineUserFromGroup(params *RemoveMachineUserFromGroupParams) (*RemoveMachineUserFromGroupOK, error)

	RemoveUserFromGroup(params *RemoveUserFromGroupParams) (*RemoveUserFromGroupOK, error)

	SetAccountMessages(params *SetAccountMessagesParams) (*SetAccountMessagesOK, error)

	SetWorkloadPassword(params *SetWorkloadPasswordParams) (*SetWorkloadPasswordOK, error)

	SetWorkloadPasswordPolicy(params *SetWorkloadPasswordPolicyParams) (*SetWorkloadPasswordPolicyOK, error)

	UnassignAzureCloudIdentity(params *UnassignAzureCloudIdentityParams) (*UnassignAzureCloudIdentityOK, error)

	UnassignGroupResourceRole(params *UnassignGroupResourceRoleParams) (*UnassignGroupResourceRoleOK, error)

	UnassignGroupRole(params *UnassignGroupRoleParams) (*UnassignGroupRoleOK, error)

	UnassignMachineUserResourceRole(params *UnassignMachineUserResourceRoleParams) (*UnassignMachineUserResourceRoleOK, error)

	UnassignMachineUserRole(params *UnassignMachineUserRoleParams) (*UnassignMachineUserRoleOK, error)

	UnassignServicePrincipalAzureCloudIdentity(params *UnassignServicePrincipalAzureCloudIdentityParams) (*UnassignServicePrincipalAzureCloudIdentityOK, error)

	UnassignUserResourceRole(params *UnassignUserResourceRoleParams) (*UnassignUserResourceRoleOK, error)

	UnassignUserRole(params *UnassignUserRoleParams) (*UnassignUserRoleOK, error)

	UpdateAccessKey(params *UpdateAccessKeyParams) (*UpdateAccessKeyOK, error)

	UpdateGroup(params *UpdateGroupParams) (*UpdateGroupOK, error)

	UpdateLdapProvider(params *UpdateLdapProviderParams) (*UpdateLdapProviderOK, error)

	UpdateSamlProvider(params *UpdateSamlProviderParams) (*UpdateSamlProviderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptTerms accepts certain terms

  Accept certain terms.
*/
func (a *Client) AcceptTerms(params *AcceptTermsParams) (*AcceptTermsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptTermsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "acceptTerms",
		Method:             "POST",
		PathPattern:        "/iam/acceptTerms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptTermsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptTermsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AcceptTermsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddMachineUserToGroup adds a machine user to group

  Add a machine user to a group.
*/
func (a *Client) AddMachineUserToGroup(params *AddMachineUserToGroupParams) (*AddMachineUserToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMachineUserToGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addMachineUserToGroup",
		Method:             "POST",
		PathPattern:        "/iam/addMachineUserToGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddMachineUserToGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddMachineUserToGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddMachineUserToGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddSSHPublicKey adds an SSH public key for an actor

  Adds an SSH public key for an actor. The private key that corresponds to this public key can be used to SSH into any workload cluster that the actor is authorized to use.
*/
func (a *Client) AddSSHPublicKey(params *AddSSHPublicKeyParams) (*AddSSHPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSSHPublicKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSshPublicKey",
		Method:             "POST",
		PathPattern:        "/iam/addSshPublicKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSSHPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSSHPublicKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddSSHPublicKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddUserToGroup adds a user to a group

  Add a user to group.
*/
func (a *Client) AddUserToGroup(params *AddUserToGroupParams) (*AddUserToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserToGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUserToGroup",
		Method:             "POST",
		PathPattern:        "/iam/addUserToGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserToGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserToGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddUserToGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignAzureCloudIdentity assigns an azure cloud identity to an actor or group

  Assign an Azure cloud identity, i.e. an object ID (OID), to an actor or group.
*/
func (a *Client) AssignAzureCloudIdentity(params *AssignAzureCloudIdentityParams) (*AssignAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignAzureCloudIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/assignAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignGroupResourceRole assigns a resource role to a group

  Assign a resource role to a group. If the resource role is already assigned to the group the request will fail.
*/
func (a *Client) AssignGroupResourceRole(params *AssignGroupResourceRoleParams) (*AssignGroupResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignGroupResourceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignGroupResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/assignGroupResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignGroupResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignGroupResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignGroupResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignGroupRole assigns a role to a group

  Assign a role to a group. If the role is already assigned to the group the request will fail.
*/
func (a *Client) AssignGroupRole(params *AssignGroupRoleParams) (*AssignGroupRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignGroupRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignGroupRole",
		Method:             "POST",
		PathPattern:        "/iam/assignGroupRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignGroupRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignGroupRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignGroupRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignMachineUserResourceRole assigns a resource role to a machine user

  Assign a resource role to a machine user. If the resource role is already assigned to the machine user the request will fail.
*/
func (a *Client) AssignMachineUserResourceRole(params *AssignMachineUserResourceRoleParams) (*AssignMachineUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignMachineUserResourceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignMachineUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/assignMachineUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignMachineUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignMachineUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignMachineUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignMachineUserRole assigns a role to a machine user

  Assign a role to a machine user. If the role is already assigned to the machine user the request will fail.
*/
func (a *Client) AssignMachineUserRole(params *AssignMachineUserRoleParams) (*AssignMachineUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignMachineUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignMachineUserRole",
		Method:             "POST",
		PathPattern:        "/iam/assignMachineUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignMachineUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignMachineUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignMachineUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignServicePrincipalAzureCloudIdentity assigns an azure cloud identity to a service principal or service principal category

  Assign an Azure cloud identity, i.e. an object ID (OID), to a service principal or service principal category.
*/
func (a *Client) AssignServicePrincipalAzureCloudIdentity(params *AssignServicePrincipalAzureCloudIdentityParams) (*AssignServicePrincipalAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignServicePrincipalAzureCloudIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignServicePrincipalAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/assignServicePrincipalAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignServicePrincipalAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignServicePrincipalAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignServicePrincipalAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignUserResourceRole assigns a resource role to a user

  Assign a resource role to a user. If the resource role is already assigned to the user the request will fail.
*/
func (a *Client) AssignUserResourceRole(params *AssignUserResourceRoleParams) (*AssignUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUserResourceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/assignUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssignUserRole assigns a role to a user

  Assign a role to a user. If the role is already assigned to the user the request will fail.
*/
func (a *Client) AssignUserRole(params *AssignUserRoleParams) (*AssignUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignUserRole",
		Method:             "POST",
		PathPattern:        "/iam/assignUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CheckRights checks if the user has the input rights on the input resources

  Checks if the user has the input rights on the input resources.
*/
func (a *Client) CheckRights(params *CheckRightsParams) (*CheckRightsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckRightsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkRights",
		Method:             "POST",
		PathPattern:        "/iam/checkRights",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckRightsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckRightsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckRightsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateGroup creates a group

  Create a group. A group is a named collection of users and machine users. Roles and resource roles can be assigned to a group impacting all members of the group.
*/
func (a *Client) CreateGroup(params *CreateGroupParams) (*CreateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGroup",
		Method:             "POST",
		PathPattern:        "/iam/createGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateLdapProvider creates ldap provider

  Create an LDAP provider.
*/
func (a *Client) CreateLdapProvider(params *CreateLdapProviderParams) (*CreateLdapProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLdapProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLdapProvider",
		Method:             "POST",
		PathPattern:        "/iam/createLdapProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLdapProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLdapProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLdapProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateMachineUser creates a machine user

  Creates a machine user in the account. A machine user can be used to access Altus API. A machine user can have access keys associated with it and can be assigned roles and resource roles. A machine user cannot login to the Altus console.
*/
func (a *Client) CreateMachineUser(params *CreateMachineUserParams) (*CreateMachineUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachineUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMachineUser",
		Method:             "POST",
		PathPattern:        "/iam/createMachineUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMachineUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMachineUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMachineUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateMachineUserAccessKey creates a new access key for a machine user

  Creates a new access key for a machine user.
*/
func (a *Client) CreateMachineUserAccessKey(params *CreateMachineUserAccessKeyParams) (*CreateMachineUserAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachineUserAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMachineUserAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/createMachineUserAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMachineUserAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMachineUserAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMachineUserAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateSamlProvider creates a s a m l provider in altus

  Creates a SAML provider in Altus.
*/
func (a *Client) CreateSamlProvider(params *CreateSamlProviderParams) (*CreateSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSamlProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/createSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateUser creates a user in altus

  Creates a user in Altus.
*/
func (a *Client) CreateUser(params *CreateUserParams) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/iam/createUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateUserAccessKey creates a new access key for a user

  Creates a new access key for a user.
*/
func (a *Client) CreateUserAccessKey(params *CreateUserAccessKeyParams) (*CreateUserAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/createUserAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteAccessKey deletes an access key

  Deletes an access key.
*/
func (a *Client) DeleteAccessKey(params *DeleteAccessKeyParams) (*DeleteAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/deleteAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteGroup deletes a group

  Delete a group.
*/
func (a *Client) DeleteGroup(params *DeleteGroupParams) (*DeleteGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroup",
		Method:             "POST",
		PathPattern:        "/iam/deleteGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMachineUser deletes a machine user

  Deletes a machine user previously created in the account.
*/
func (a *Client) DeleteMachineUser(params *DeleteMachineUserParams) (*DeleteMachineUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMachineUser",
		Method:             "POST",
		PathPattern:        "/iam/deleteMachineUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMachineUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMachineUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMachineUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSamlProvider deletes a s a m l provider in altus account

  Deletes a SAML provider in Altus account.
*/
func (a *Client) DeleteSamlProvider(params *DeleteSamlProviderParams) (*DeleteSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSamlProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/deleteSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSSHPublicKey deletes an SSH public key for an actor

  Delete an SSH public key for an actor.
*/
func (a *Client) DeleteSSHPublicKey(params *DeleteSSHPublicKeyParams) (*DeleteSSHPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSSHPublicKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSshPublicKey",
		Method:             "POST",
		PathPattern:        "/iam/deleteSshPublicKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSSHPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSSHPublicKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSSHPublicKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUser deletes a user and all associated resources

  Deletes a user. This includes deleting all associated access keys and unassigning all roles and resource roles assigned to the user. The user is also removed from all groups it belongs to. If the call succeeds the user will not be able to login interactively, or use any access keys to access the CDP control plane. This feature is under development and some reasources may be left behind after a successful call. Note that user-sync is not triggered yet by this call and the caller must trigger that to ensure that the user loses access to all environments as soon as possible.
*/
func (a *Client) DeleteUser(params *DeleteUserParams) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "POST",
		PathPattern:        "/iam/deleteUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeLdapProvider describes ldap provider

  Describes an LDAP provider
*/
func (a *Client) DescribeLdapProvider(params *DescribeLdapProviderParams) (*DescribeLdapProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeLdapProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeLdapProvider",
		Method:             "POST",
		PathPattern:        "/iam/describeLdapProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeLdapProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeLdapProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeLdapProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeSamlProvider describes one s a m l provider

  Describes one SAML provider.
*/
func (a *Client) DescribeSamlProvider(params *DescribeSamlProviderParams) (*DescribeSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSamlProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/describeSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeSSHPublicKey describes an SSH public key for an actor

  Describe an SSH public key for an actor.
*/
func (a *Client) DescribeSSHPublicKey(params *DescribeSSHPublicKeyParams) (*DescribeSSHPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSSHPublicKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeSshPublicKey",
		Method:             "POST",
		PathPattern:        "/iam/describeSshPublicKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeSSHPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeSSHPublicKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeSSHPublicKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DescribeTerms describes one set of terms

  Describes one set of terms.
*/
func (a *Client) DescribeTerms(params *DescribeTermsParams) (*DescribeTermsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeTermsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeTerms",
		Method:             "POST",
		PathPattern:        "/iam/describeTerms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeTermsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeTermsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeTermsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DisableClouderaSSOLogin disables interactive login using cloudera s s o for this account

  Disables interactive login using Cloudera SSO for this account. When disabled, only users who are designated account administrators will be able to use Cloudera SSO to interactively login to the Altus account. All other users will only be able to interactively login using SAML providers defined for the account. This is a no-op if login using Cloudera SSO are already disabled.
*/
func (a *Client) DisableClouderaSSOLogin(params *DisableClouderaSSOLoginParams) (*DisableClouderaSSOLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableClouderaSSOLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disableClouderaSSOLogin",
		Method:             "POST",
		PathPattern:        "/iam/disableClouderaSSOLogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableClouderaSSOLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableClouderaSSOLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisableClouderaSSOLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EnableClouderaSSOLogin enables interactive login using cloudera s s o for this account

  Enables interactive login using Cloudera SSO for this account. This is a no-op if login using Cloudera SSO are already enabled.
*/
func (a *Client) EnableClouderaSSOLogin(params *EnableClouderaSSOLoginParams) (*EnableClouderaSSOLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableClouderaSSOLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enableClouderaSSOLogin",
		Method:             "POST",
		PathPattern:        "/iam/enableClouderaSSOLogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableClouderaSSOLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableClouderaSSOLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnableClouderaSSOLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAccessKey gets information on an access key

  Gets information on an access key. If no access key ID is specified. Information on the access key used to make the request is returned.
*/
func (a *Client) GetAccessKey(params *GetAccessKeyParams) (*GetAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/getAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAccount retrieves information about the altus account

  Retrieves information about the Altus account.
*/
func (a *Client) GetAccount(params *GetAccountParams) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccount",
		Method:             "POST",
		PathPattern:        "/iam/getAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAccountMessages gets account messages

  Get account messages.
*/
func (a *Client) GetAccountMessages(params *GetAccountMessagesParams) (*GetAccountMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountMessages",
		Method:             "POST",
		PathPattern:        "/iam/getAccountMessages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountMessagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAssigneeAuthorizationInformation retrieves authorization information about an assignee

  Retrieve authorization information about an assignee. This includes role and resource role assignments, group membership, as well as all role and resource roles assigned to the groups the assignee belongs to.
*/
func (a *Client) GetAssigneeAuthorizationInformation(params *GetAssigneeAuthorizationInformationParams) (*GetAssigneeAuthorizationInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssigneeAuthorizationInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssigneeAuthorizationInformation",
		Method:             "POST",
		PathPattern:        "/iam/getAssigneeAuthorizationInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssigneeAuthorizationInformationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssigneeAuthorizationInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAssigneeAuthorizationInformationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetUser gets information on a user

  Gets information on a user. If no user name is specified. The user name is determined from the access key used to make the request.
*/
func (a *Client) GetUser(params *GetUserParams) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "POST",
		PathPattern:        "/iam/getUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  InitiateSupportCase initiates a new support case

  Initiate a new support case. User must complete submission in browser using a web form URL included in the response.
*/
func (a *Client) InitiateSupportCase(params *InitiateSupportCaseParams) (*InitiateSupportCaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateSupportCaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initiateSupportCase",
		Method:             "POST",
		PathPattern:        "/iam/initiateSupportCase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InitiateSupportCaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitiateSupportCaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InitiateSupportCaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListAccessKeys lists access keys

  Lists access keys.
*/
func (a *Client) ListAccessKeys(params *ListAccessKeysParams) (*ListAccessKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAccessKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAccessKeys",
		Method:             "POST",
		PathPattern:        "/iam/listAccessKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAccessKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAccessKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAccessKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListEntitlements lists granted entitlements

  Lists granted entitlements.
*/
func (a *Client) ListEntitlements(params *ListEntitlementsParams) (*ListEntitlementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEntitlementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEntitlements",
		Method:             "POST",
		PathPattern:        "/iam/listEntitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEntitlementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEntitlementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEntitlementsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListGroupAssignedResourceRoles lists a group s assigned resource roles

  Lists a group's assigned resource roles.
*/
func (a *Client) ListGroupAssignedResourceRoles(params *ListGroupAssignedResourceRolesParams) (*ListGroupAssignedResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupAssignedResourceRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupAssignedResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listGroupAssignedResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupAssignedResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupAssignedResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupAssignedResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListGroupAssignedRoles lists the group s assigned roles

  Lists the group's assigned roles.
*/
func (a *Client) ListGroupAssignedRoles(params *ListGroupAssignedRolesParams) (*ListGroupAssignedRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupAssignedRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupAssignedRoles",
		Method:             "POST",
		PathPattern:        "/iam/listGroupAssignedRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupAssignedRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupAssignedRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupAssignedRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListGroupMembers lists the members of a group

  List the members of a group.
*/
func (a *Client) ListGroupMembers(params *ListGroupMembersParams) (*ListGroupMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupMembers",
		Method:             "POST",
		PathPattern:        "/iam/listGroupMembers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListGroups lists groups

  Lists groups. If no group names are specified, the call lists all groups.
*/
func (a *Client) ListGroups(params *ListGroupsParams) (*ListGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroups",
		Method:             "POST",
		PathPattern:        "/iam/listGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListGroupsForMachineUser lists the groups that the machine user belongs to

  List the groups that the machine user belongs to.
*/
func (a *Client) ListGroupsForMachineUser(params *ListGroupsForMachineUserParams) (*ListGroupsForMachineUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsForMachineUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupsForMachineUser",
		Method:             "POST",
		PathPattern:        "/iam/listGroupsForMachineUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsForMachineUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsForMachineUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupsForMachineUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListGroupsForUser lists the groups that the user belongs to

  List the groups that the user belongs to.
*/
func (a *Client) ListGroupsForUser(params *ListGroupsForUserParams) (*ListGroupsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupsForUser",
		Method:             "POST",
		PathPattern:        "/iam/listGroupsForUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupsForUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListLdapProviders lists l d a p providers

  Lists LDAP providers in the CDP acccount.
*/
func (a *Client) ListLdapProviders(params *ListLdapProvidersParams) (*ListLdapProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLdapProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLdapProviders",
		Method:             "POST",
		PathPattern:        "/iam/listLdapProviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLdapProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLdapProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLdapProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListMachineUserAssignedResourceRoles lists a machine user s assigned resource roles

  Lists a machine user's assigned resource roles.
*/
func (a *Client) ListMachineUserAssignedResourceRoles(params *ListMachineUserAssignedResourceRolesParams) (*ListMachineUserAssignedResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineUserAssignedResourceRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMachineUserAssignedResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listMachineUserAssignedResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachineUserAssignedResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachineUserAssignedResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachineUserAssignedResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListMachineUserAssignedRoles lists the machine user s assigned roles

  Lists the machine user's assigned roles.
*/
func (a *Client) ListMachineUserAssignedRoles(params *ListMachineUserAssignedRolesParams) (*ListMachineUserAssignedRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineUserAssignedRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMachineUserAssignedRoles",
		Method:             "POST",
		PathPattern:        "/iam/listMachineUserAssignedRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachineUserAssignedRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachineUserAssignedRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachineUserAssignedRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListMachineUsers lists machine users

  Lists machine users in the account.
*/
func (a *Client) ListMachineUsers(params *ListMachineUsersParams) (*ListMachineUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMachineUsers",
		Method:             "POST",
		PathPattern:        "/iam/listMachineUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachineUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachineUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachineUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListResourceAssignees lists the resource assignees and their respective resource roles for the resource

  List the resource assignees and their respective resource roles for the resource.
*/
func (a *Client) ListResourceAssignees(params *ListResourceAssigneesParams) (*ListResourceAssigneesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceAssigneesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listResourceAssignees",
		Method:             "POST",
		PathPattern:        "/iam/listResourceAssignees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceAssigneesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceAssigneesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceAssigneesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListResourceRoleAssignments lists resource role assignments in the account

  Lists resource role assignments in the account.
*/
func (a *Client) ListResourceRoleAssignments(params *ListResourceRoleAssignmentsParams) (*ListResourceRoleAssignmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceRoleAssignmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listResourceRoleAssignments",
		Method:             "POST",
		PathPattern:        "/iam/listResourceRoleAssignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceRoleAssignmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceRoleAssignmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceRoleAssignmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListResourceRoles lists all the available resource roles

  Lists all the available reource roles. Resource roles grants rights over certain resources.
*/
func (a *Client) ListResourceRoles(params *ListResourceRolesParams) (*ListResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListRoles lists all the available roles

  Lists all the available roles. Roles grant rights to users via policies that are attached to the roles.
*/
func (a *Client) ListRoles(params *ListRolesParams) (*ListRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRoles",
		Method:             "POST",
		PathPattern:        "/iam/listRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSamlProviders lists s a m l providers in altus account

  Lists SAML providers in Altus account.
*/
func (a *Client) ListSamlProviders(params *ListSamlProvidersParams) (*ListSamlProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSamlProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSamlProviders",
		Method:             "POST",
		PathPattern:        "/iam/listSamlProviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSamlProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSamlProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSamlProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSSHPublicKeys lists SSH public keys for an actor

  Lists SSH public keys for an actor.
*/
func (a *Client) ListSSHPublicKeys(params *ListSSHPublicKeysParams) (*ListSSHPublicKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSSHPublicKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSshPublicKeys",
		Method:             "POST",
		PathPattern:        "/iam/listSshPublicKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSSHPublicKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSSHPublicKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSSHPublicKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListTerms lists relevant terms

  Lists relevant terms.
*/
func (a *Client) ListTerms(params *ListTermsParams) (*ListTermsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTermsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTerms",
		Method:             "POST",
		PathPattern:        "/iam/listTerms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTermsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTermsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTermsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListUserAssignedResourceRoles lists a user s assigned resource roles

  Lists a user's assigned resource roles.
*/
func (a *Client) ListUserAssignedResourceRoles(params *ListUserAssignedResourceRolesParams) (*ListUserAssignedResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserAssignedResourceRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUserAssignedResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listUserAssignedResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserAssignedResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserAssignedResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserAssignedResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListUserAssignedRoles lists the user s assigned roles

  Lists the user's assigned roles.
*/
func (a *Client) ListUserAssignedRoles(params *ListUserAssignedRolesParams) (*ListUserAssignedRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserAssignedRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUserAssignedRoles",
		Method:             "POST",
		PathPattern:        "/iam/listUserAssignedRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserAssignedRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserAssignedRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserAssignedRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListUsers lists users

  Lists users.
*/
func (a *Client) ListUsers(params *ListUsersParams) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "POST",
		PathPattern:        "/iam/listUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveMachineUserFromGroup removes a machine user from a group

  Remove a machine user from a group.
*/
func (a *Client) RemoveMachineUserFromGroup(params *RemoveMachineUserFromGroupParams) (*RemoveMachineUserFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveMachineUserFromGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeMachineUserFromGroup",
		Method:             "POST",
		PathPattern:        "/iam/removeMachineUserFromGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveMachineUserFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveMachineUserFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveMachineUserFromGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveUserFromGroup removes a user from a group

  Remove a user from a group.
*/
func (a *Client) RemoveUserFromGroup(params *RemoveUserFromGroupParams) (*RemoveUserFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserFromGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeUserFromGroup",
		Method:             "POST",
		PathPattern:        "/iam/removeUserFromGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveUserFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveUserFromGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetAccountMessages sets messages for an account

  Set messages for an account.
*/
func (a *Client) SetAccountMessages(params *SetAccountMessagesParams) (*SetAccountMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccountMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAccountMessages",
		Method:             "POST",
		PathPattern:        "/iam/setAccountMessages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccountMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAccountMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAccountMessagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetWorkloadPassword sets the workload password for an actor

  Set the workload password for an actor. This will be the actor's password in all Environments they have access to, including Environments they are given access to after setting the password. The password plaintext is not kept.
*/
func (a *Client) SetWorkloadPassword(params *SetWorkloadPasswordParams) (*SetWorkloadPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkloadPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setWorkloadPassword",
		Method:             "POST",
		PathPattern:        "/iam/setWorkloadPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWorkloadPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkloadPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetWorkloadPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetWorkloadPasswordPolicy sets the workload password policy for the account

  Set the workload password for the account. Changes to the workload password policy only affect passwords that are set after the policy has been updated. By default, passwords never expire.
*/
func (a *Client) SetWorkloadPasswordPolicy(params *SetWorkloadPasswordPolicyParams) (*SetWorkloadPasswordPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkloadPasswordPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setWorkloadPasswordPolicy",
		Method:             "POST",
		PathPattern:        "/iam/setWorkloadPasswordPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWorkloadPasswordPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkloadPasswordPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetWorkloadPasswordPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignAzureCloudIdentity unassigns an azure cloud identity from an actor or group

  Unassign an Azure cloud identity, i.e. an object ID (OID), from an actor or group.
*/
func (a *Client) UnassignAzureCloudIdentity(params *UnassignAzureCloudIdentityParams) (*UnassignAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignAzureCloudIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/unassignAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignGroupResourceRole unassigns a resource role from a group

  Unassign a resource role from a group. If the resource role is not currently assigned to the group the request will fail.
*/
func (a *Client) UnassignGroupResourceRole(params *UnassignGroupResourceRoleParams) (*UnassignGroupResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignGroupResourceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignGroupResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignGroupResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignGroupResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignGroupResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignGroupResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignGroupRole unassigns a role from a group

  Unassign a role from a group. If the role is not currently assigned to the group the request will fail.
*/
func (a *Client) UnassignGroupRole(params *UnassignGroupRoleParams) (*UnassignGroupRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignGroupRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignGroupRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignGroupRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignGroupRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignGroupRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignGroupRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignMachineUserResourceRole unassigns a resource role from a machine user

  Unassign a resource role from a machine user. If the resource role is not currently assigned to the machine user the request will fail.
*/
func (a *Client) UnassignMachineUserResourceRole(params *UnassignMachineUserResourceRoleParams) (*UnassignMachineUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignMachineUserResourceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignMachineUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignMachineUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignMachineUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignMachineUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignMachineUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignMachineUserRole unassigns a role from a machine user

  Unassign a role from a machine user. If the role is not currently assigned to the machine user the request will fail.
*/
func (a *Client) UnassignMachineUserRole(params *UnassignMachineUserRoleParams) (*UnassignMachineUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignMachineUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignMachineUserRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignMachineUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignMachineUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignMachineUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignMachineUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignServicePrincipalAzureCloudIdentity unassigns an azure cloud identity from a service principal or service principal category

  Unassign an Azure cloud identity, i.e. an object ID (OID), from a service principal or service principal category.
*/
func (a *Client) UnassignServicePrincipalAzureCloudIdentity(params *UnassignServicePrincipalAzureCloudIdentityParams) (*UnassignServicePrincipalAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignServicePrincipalAzureCloudIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignServicePrincipalAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/unassignServicePrincipalAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignServicePrincipalAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignServicePrincipalAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignServicePrincipalAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignUserResourceRole unassigns a resource role from a user

  Unassign a resource role from a user. If the resource role is not currently assigned to the user the request will fail.
*/
func (a *Client) UnassignUserResourceRole(params *UnassignUserResourceRoleParams) (*UnassignUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignUserResourceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnassignUserRole unassigns a role from a user

  Unassign a role from a user. If the role is not currently assigned to the user the request will fail.
*/
func (a *Client) UnassignUserRole(params *UnassignUserRoleParams) (*UnassignUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignUserRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unassignUserRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateAccessKey updates an access key

  Updates an access key.
*/
func (a *Client) UpdateAccessKey(params *UpdateAccessKeyParams) (*UpdateAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccessKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/updateAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateGroup updates a group

  Update a group.
*/
func (a *Client) UpdateGroup(params *UpdateGroupParams) (*UpdateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGroup",
		Method:             "POST",
		PathPattern:        "/iam/updateGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateLdapProvider updates ldap provider

  Update an LDAP provider.
*/
func (a *Client) UpdateLdapProvider(params *UpdateLdapProviderParams) (*UpdateLdapProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLdapProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLdapProvider",
		Method:             "POST",
		PathPattern:        "/iam/updateLdapProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLdapProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLdapProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLdapProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateSamlProvider updates a s a m l provider in altus

  Updates a SAML provider in Altus.
*/
func (a *Client) UpdateSamlProvider(params *UpdateSamlProviderParams) (*UpdateSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSamlProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/updateSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
