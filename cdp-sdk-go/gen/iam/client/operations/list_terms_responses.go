// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudera/terraform-provider-cdp/cdp-sdk-go/gen/iam/models"
)

// ListTermsReader is a Reader for the ListTerms structure.
type ListTermsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTermsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTermsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListTermsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTermsOK creates a ListTermsOK with default headers values
func NewListTermsOK() *ListTermsOK {
	return &ListTermsOK{}
}

/*ListTermsOK handles this case with default header values.

Expected response to a valid request.
*/
type ListTermsOK struct {
	Payload *models.ListTermsResponse
}

func (o *ListTermsOK) Error() string {
	return fmt.Sprintf("[POST /iam/listTerms][%d] listTermsOK  %+v", 200, o.Payload)
}

func (o *ListTermsOK) GetPayload() *models.ListTermsResponse {
	return o.Payload
}

func (o *ListTermsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListTermsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTermsDefault creates a ListTermsDefault with default headers values
func NewListTermsDefault(code int) *ListTermsDefault {
	return &ListTermsDefault{
		_statusCode: code,
	}
}

/*ListTermsDefault handles this case with default header values.

The default response on an error.
*/
type ListTermsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the list terms default response
func (o *ListTermsDefault) Code() int {
	return o._statusCode
}

func (o *ListTermsDefault) Error() string {
	return fmt.Sprintf("[POST /iam/listTerms][%d] listTerms default  %+v", o._statusCode, o.Payload)
}

func (o *ListTermsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListTermsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
