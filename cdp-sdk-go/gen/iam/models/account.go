// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Account Information about a Cloudera Altus account.
//
// swagger:model Account
type Account struct {

	// Whether interactive login using Cloudera SSO is enabled.
	// Required: true
	ClouderaSSOLoginEnabled *bool `json:"clouderaSSOLoginEnabled"`

	// The workload password policy object.
	// Required: true
	WorkloadPasswordPolicy *WorkloadPasswordPolicy `json:"workloadPasswordPolicy"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouderaSSOLoginEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadPasswordPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateClouderaSSOLoginEnabled(formats strfmt.Registry) error {

	if err := validate.Required("clouderaSSOLoginEnabled", "body", m.ClouderaSSOLoginEnabled); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateWorkloadPasswordPolicy(formats strfmt.Registry) error {

	if err := validate.Required("workloadPasswordPolicy", "body", m.WorkloadPasswordPolicy); err != nil {
		return err
	}

	if m.WorkloadPasswordPolicy != nil {
		if err := m.WorkloadPasswordPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadPasswordPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
