// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SamlProvider Information used to connect an Altus account to an external identity provider.
//
// swagger:model SamlProvider
type SamlProvider struct {

	// The date when this SAML provider record was created.
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// CRN of the SAML provider in Altus.
	// Required: true
	Crn *string `json:"crn"`

	// The original metadata that was passed while creating the SAML provider connector. This field will not be set for listSamlProviders API response.
	SamlMetadataDocument string `json:"samlMetadataDocument,omitempty"`

	// The unique ID of the saml provider.
	// Required: true
	SamlProviderID *string `json:"samlProviderId"`

	// Name of the SAML provider.
	// Required: true
	SamlProviderName *string `json:"samlProviderName"`

	// Whether users federated with this SAML provider will have their group membership synchronized. Group membership can be passed using the https://altus.cloudera.com/SAML/Attributes/groups SAML assertion.
	// Required: true
	SyncGroupsOnLogin *bool `json:"syncGroupsOnLogin"`
}

// Validate validates this saml provider
func (m *SamlProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlProviderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncGroupsOnLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SamlProvider) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SamlProvider) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *SamlProvider) validateSamlProviderID(formats strfmt.Registry) error {

	if err := validate.Required("samlProviderId", "body", m.SamlProviderID); err != nil {
		return err
	}

	return nil
}

func (m *SamlProvider) validateSamlProviderName(formats strfmt.Registry) error {

	if err := validate.Required("samlProviderName", "body", m.SamlProviderName); err != nil {
		return err
	}

	return nil
}

func (m *SamlProvider) validateSyncGroupsOnLogin(formats strfmt.Registry) error {

	if err := validate.Required("syncGroupsOnLogin", "body", m.SyncGroupsOnLogin); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SamlProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SamlProvider) UnmarshalBinary(b []byte) error {
	var res SamlProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
