// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUserRequest Request object for creating user request.
//
// swagger:model CreateUserRequest
type CreateUserRequest struct {

	// The email address for the user. Used for display purposes only.
	// Required: true
	Email *string `json:"email"`

	// The user first name.
	FirstName string `json:"firstName,omitempty"`

	// The list of groups the user belongs to. The groups will be created if they do not exist.
	Groups []string `json:"groups"`

	// The identity provider user id for the user. This ID must match the NameId attribute value that will be passed for the user in the SAML response using the associated SAML provider.
	// Required: true
	IdentityProviderUserID *string `json:"identityProviderUserId"`

	// The user last name.
	LastName string `json:"lastName,omitempty"`

	// The name or CRN of the SAML provider the user will use for login.
	// Required: true
	SamlProviderName *string `json:"samlProviderName"`
}

// Validate validates this create user request
func (m *CreateUserRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityProviderUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlProviderName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUserRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserRequest) validateIdentityProviderUserID(formats strfmt.Registry) error {

	if err := validate.Required("identityProviderUserId", "body", m.IdentityProviderUserID); err != nil {
		return err
	}

	return nil
}

func (m *CreateUserRequest) validateSamlProviderName(formats strfmt.Registry) error {

	if err := validate.Required("samlProviderName", "body", m.SamlProviderName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateUserRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUserRequest) UnmarshalBinary(b []byte) error {
	var res CreateUserRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
