// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Entitlement Information about an entitlement.
//
// swagger:model Entitlement
type Entitlement struct {

	// The name of the entitlement
	// Required: true
	EntitlementName *string `json:"entitlementName"`

	// The date the entitlement was granted.
	// Required: true
	// Format: date-time
	GrantDate *strfmt.DateTime `json:"grantDate"`
}

// Validate validates this entitlement
func (m *Entitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntitlementName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entitlement) validateEntitlementName(formats strfmt.Registry) error {

	if err := validate.Required("entitlementName", "body", m.EntitlementName); err != nil {
		return err
	}

	return nil
}

func (m *Entitlement) validateGrantDate(formats strfmt.Registry) error {

	if err := validate.Required("grantDate", "body", m.GrantDate); err != nil {
		return err
	}

	if err := validate.FormatOf("grantDate", "body", "date-time", m.GrantDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this entitlement based on context it is used
func (m *Entitlement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Entitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Entitlement) UnmarshalBinary(b []byte) error {
	var res Entitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
