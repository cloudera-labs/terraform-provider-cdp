// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPasswordPolicyResponse Response object for a get password policy response.
//
// swagger:model GetPasswordPolicyResponse
type GetPasswordPolicyResponse struct {

	// The machine user workload password policy object. May be null if no such policy was defined.
	MachineUserWorkloadPasswordPolicy *WorkloadPasswordPolicy `json:"machineUserWorkloadPasswordPolicy,omitempty"`

	// The workload password policy object.
	// Required: true
	WorkloadPasswordPolicy *WorkloadPasswordPolicy `json:"workloadPasswordPolicy"`
}

// Validate validates this get password policy response
func (m *GetPasswordPolicyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMachineUserWorkloadPasswordPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadPasswordPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPasswordPolicyResponse) validateMachineUserWorkloadPasswordPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MachineUserWorkloadPasswordPolicy) { // not required
		return nil
	}

	if m.MachineUserWorkloadPasswordPolicy != nil {
		if err := m.MachineUserWorkloadPasswordPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineUserWorkloadPasswordPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machineUserWorkloadPasswordPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *GetPasswordPolicyResponse) validateWorkloadPasswordPolicy(formats strfmt.Registry) error {

	if err := validate.Required("workloadPasswordPolicy", "body", m.WorkloadPasswordPolicy); err != nil {
		return err
	}

	if m.WorkloadPasswordPolicy != nil {
		if err := m.WorkloadPasswordPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadPasswordPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workloadPasswordPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get password policy response based on the context it is used
func (m *GetPasswordPolicyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMachineUserWorkloadPasswordPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkloadPasswordPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPasswordPolicyResponse) contextValidateMachineUserWorkloadPasswordPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MachineUserWorkloadPasswordPolicy != nil {
		if err := m.MachineUserWorkloadPasswordPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineUserWorkloadPasswordPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machineUserWorkloadPasswordPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *GetPasswordPolicyResponse) contextValidateWorkloadPasswordPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkloadPasswordPolicy != nil {
		if err := m.WorkloadPasswordPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadPasswordPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workloadPasswordPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPasswordPolicyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPasswordPolicyResponse) UnmarshalBinary(b []byte) error {
	var res GetPasswordPolicyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
