// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAccessKeysRequest Request object for a list access keys request.
//
// swagger:model ListAccessKeysRequest
type ListAccessKeysRequest struct {

	// The access key IDs or CRNs of the access keys.
	AccessKeyIds []string `json:"accessKeyIds"`

	// Filters the access keys list to access keys associated with this machine user. Can be the machine user name or CRN. If set, user cannot be set.
	MachineUser string `json:"machineUser,omitempty"`

	// The size of each page.
	// Maximum: 100
	// Minimum: 1
	PageSize int32 `json:"pageSize,omitempty"`

	// A token to specify where to start paginating. This is the nextToken from a previously truncated response.
	StartingToken string `json:"startingToken,omitempty"`

	// Filters the access keys list to access keys associated with this user. Can be the user ID or user CRN. If set, machineUser cannot be set.
	User string `json:"user,omitempty"`
}

// Validate validates this list access keys request
func (m *ListAccessKeysRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListAccessKeysRequest) validatePageSize(formats strfmt.Registry) error {

	if swag.IsZero(m.PageSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("pageSize", "body", int64(m.PageSize), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "body", int64(m.PageSize), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListAccessKeysRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListAccessKeysRequest) UnmarshalBinary(b []byte) error {
	var res ListAccessKeysRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
